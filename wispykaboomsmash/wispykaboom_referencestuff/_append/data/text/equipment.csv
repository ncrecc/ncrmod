Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Black Viper,Do [sword]<d6> damage[;]|inflict either [ice] freeze[;]|[vanish] vanish or [shock] shock,2,attack(d); var randelem = rand([ICE[;]~ncr_vanish~[;]SHOCK]); inflict(randelem); if(randelem == ICE) { sfx(~_ice~); } else if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == SHOCK) { sfx(~_shock~); };,Catapult,MAX3|MIN4,,PINK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Black Viper_upgraded,Do [sword]<d6> damage[;]|inflict [ice] freeze[;] [vanish] vanish|and [shock] shock,2,attack(d); inflict(ICE); sfx(~_ice~); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(SHOCK); sfx(~_shock~);,Catapult,MAX3|MIN4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Diamond Fog Machine,Do [vanish]9 dmg[;] +[vanish]3 vanish[;]|spread over 3 turns,1,if(simulation) { attack(9[;]VANISH); inflict(~ncr_vanish~[;]3); } else { jinx(~Diamond Fog~[;]~take [vanish]%VAR% damage[;] +[vanish]1 vanish~[;]~Take [vanish]%VAR% damage[;] +[vanish]1 vanish.~[;]~attack(%VAR%[;]VANISH); inflict(\~ncr_vanish\~[;]1); sfxdamage(null[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]1[;]3); jinx(~Diamond Fog~[;]~take [vanish]%VAR% damage[;] +[vanish]1 vanish~[;]~Take [vanish]%VAR% damage[;] +[vanish]1 vanish.~[;]~attack(%VAR%[;]VANISH); inflict(\~ncr_vanish\~[;]1); sfxdamage(null[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]2[;]3); jinx(~Diamond Fog~[;]~take [vanish]%VAR% damage[;] +[vanish]1 vanish~[;]~Take [vanish]%VAR% damage[;] +[vanish]1 vanish.~[;]~attack(%VAR%[;]VANISH); inflict(\~ncr_vanish\~[;]1); sfxdamage(null[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]3[;]3); sfx(~_vanish~); },Strobe Light,REQUIRE6|REQUIRE6,,BRIGHTCYAN,increaserange,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Diamond Fog Machine_downgraded,Inflict [vanish]3 vanish[;] spread|over 3 turns,1,if(simulation) { inflict(~ncr_vanish~[;]3); } else { jinx(~Diamond Humid~[;]~inflict [vanish]%VAR% vanish~[;]~Inflict [vanish]%VAR% vanish.~[;]~inflict(\~ncr_vanish\~[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]1[;]1); jinx(~Diamond Humid~[;]~inflict [vanish]%VAR% vanish~[;]~Inflict [vanish]%VAR% vanish.~[;]~inflict(\~ncr_vanish\~[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]2[;]1); jinx(~Diamond Humid~[;]~inflict [vanish]%VAR% vanish~[;]~Inflict [vanish]%VAR% vanish.~[;]~inflict(\~ncr_vanish\~[;]%VAR%); sfx(\~_vanish\~)~[;]target[;]self[;]3[;]1); sfx(~_vanish~); };,Strobe Light,REQUIRE6|REQUIRE6,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ghost Scarf,Next turn[;] self inflict|[vanish]1 vanish,1,jinx(~Ghost Scarf~[;]~self inflict [vanish]1 vanish~[;]~Self inflict [vanish]1 vanish.~[;]~inflict(\~ncr_vanish\~[;]%VAR%); sfx(\~_vanish\~);~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Delude,ODD,,PINK,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Ghost Scarf_upgraded,Next turn[;] inflict [vanish]1|vanish to yourself and|the enemy,1,jinx(~Ghost Scarf~[;]~inflict [vanish]1 vanish to everyone~[;]~Inflict [vanish]1 vanish to everyone.~[;]~inflict(\~ncr_vanish\~[;]%VAR%); inflictself(\~ncr_vanish\~[;]%VAR%); sfx(\~_vanish\~);~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Delude,ODD,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Agnea's Arrow,[vanish]<d6> dmg[;] inflict [vanish]1 vanish|(If [mana]>=7: double enemy|vanish),1,attack(d[;]VANISH); sfxdamage(target[;]d); inflict(~ncr_vanish~); if(getstatusself(MANA) >= 7) { inflict(~ncr_vanish~[;]getstatus(~ncr_vanish~)); }; sfx(~_vanish~);,Hadoken,EVEN,,PINK,simplify,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Agnea's Arrow_downgraded,Do [vanish]<d6> damage[;]|inflict [vanish]1 vanish,1,attack(d[;]VANISH); sfxdamage(target[;]d); inflict(~ncr_vanish~); sfx(~_vanish~);,Hadoken,EVEN,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Abyssal Eye,Do [sword]<d6> damage[;]|inflict one of the following:|[ice]2[][;] [vanish]2[][;] [shock]2[][;] [weaken]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([ICE[;]~ncr_vanish~[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ICE) { sfx(~_ice~); } else if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == SHOCK) { sfx(~_shock~); } else if(randelem == WEAKEN) { sfx(~_weaken~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Abyssal Eye_upgraded,Do [sword]<d6> damage[;]|inflict [ice]1[][;] [vanish]1[][;] [shock]1[][;]|[weaken]1[][;] [poison]1[] and [blind]1,2,attack(d); sfxdamage(target[;]d); inflict(ICE); sfx(~_ice~); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~); inflict(POISON); sfx(~_poison~); inflict(BLIND); sfx(~_blind~);,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Abyssal Eye_downgraded,Do [sword]<d6> damage[;]|inflict one of the following:|[vanish]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([~ncr_vanish~[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Reapersknife,Do [vanish]<d6> dmg[;] +[vanish]1 vanish|,2,attack(d[;]VANISH); inflict(~ncr_vanish~); sfxdamage(target[;]d); sfx(~_vanish~);,Plasma Gun,MAX3,,PINK,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Reapersknife_upgraded,Do [vanish]<d6> dmg[;] +[vanish]1 vanish|,2,attack(d[;]VANISH); inflict(~ncr_vanish~); sfxdamage(target[;]d); sfx(~_vanish~);,Plasma Gun,MAX3,,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Reapersknife_downgraded,Do [vanish]<d6> damage|,2,attack(d[;]VANISH); sfxdamage(target[;]d); sfx(~_vanish~);,Plasma Gun,MAX3,,PINK,,,,,3,NO,NO,,,,,,,,,,,,,
Reapersknife_weakened,Do [vanish]<d6> damage|,2,attack(d[;]VANISH); sfxdamage(target[;]d); sfx(~_vanish~);,Plasma Gun,MAX3,,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Psychic Psi,Inflict [vanish]2 vanish|On double 3: do [vanish]<d6> dmg,1,inflict(~ncr_vanish~[;]2); if(d == 3) { attack(d*2[;]VANISH); sfxdamage(target[;]d*2); } sfx(~_vanish~);,Strobe Light,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Psychic Psi_upgraded,Inflict [vanish]2 vanish|On double odd: do [vanish]<d6> dmg,1,inflict(~ncr_vanish~[;]2); if(d % 2 == 1) { attack(d*2[;]VANISH); sfxdamage(target[;]d*2); } sfx(~_vanish~);,Strobe Light,DOUBLES|DOUBLES,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Psychic Psi_downgraded,Do [vanish]6 damage,1,attack(6[;]VANISH); sfxdamage(target[;]6);,Strobe Light,REQUIRE3|REQUIRE3,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Soul Chimera,Do [sword]<d6> damage[;]|on 1[;] inflict [fire]1 burn|and [ice]1 freeze,1,attack(d); sfxdamage(target[;]d); if(d == 1) { inflict(FIRE); inflict(ICE); sfx(~_fire~); sfx(~_ice~); },Warping Ashes,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Soul Chimera_upgraded,Do [sword]<d6> damage[;]|on 6[;] inflict [fire]1 burn|and [ice]1 freeze,1,attack(d); sfxdamage(target[;]d); if(d == 6) { inflict(FIRE); inflict(ICE); sfx(~_fire~); sfx(~_ice~); },Warping Ashes,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Soul Chimera_downgraded,Do [sword]<d6> damage[;]|on 1[;] inflict [fire]1 burn,1,attack(d); sfxdamage(target[;]d); if(d == 1) { inflict(FIRE); sfx(~_fire~); },Warping Ashes,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bundle of Swaps,Do stuff based on dice used|1: [sword]1[;] 2: [vanish]1[;] 3: [ice]1[;]|4: [weaken]1[;] 5: [shock]2[;] 6: [heal]3,1,var sword = 0; var vanish = 0; var ice = 0; var weaken = 0; var shock = 0; var healing = 0; for(dice in e.gamevar.get(~diceused~)){ if(dice.basevalue == 1){ sword++; }; if(dice.basevalue == 2){ vanish++; }; if(dice.basevalue == 3){ ice++; }; if(dice.basevalue == 4){ weaken++; }; if(dice.basevalue == 5){ shock += 2; }; if(dice.basevalue == 6){ healing += 3; }; }; if(sword > 0){ attack(sword); sfxdamage(target[;]sword); }; if(vanish > 0){ inflict(~ncr_vanish~[;]vanish); sfx(~_vanish~); }; if(ice > 0){ inflict(ICE[;]ice); sfx(~_ice~); }; if(weaken > 0){ inflict(WEAKEN[;]weaken); sfx(~_weaken~); }; if(shock > 0){ inflict(SHOCK[;]shock); sfx(~_shock~); }; if(healing > 0){ attackself(-healing); sfx(~_heal~); };,Random Roll,COUNTDOWN,10,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,e.gamevar.set(~diceused~[;]e.dicehistory); trace(e.gamevar.get(~diceused~));,,,,,var healing = 0; for(dice in e.gamevar.get(~diceused~)){ if(dice.basevalue == 6){ healing += 3; }; }; if(healing > 0){ attackself(-healing); sfx(~_heal~); };
Bundle of Swaps_upgraded,Do stuff based on dice used|1: [sword]1[;] 2: [vanish]1[;] 3: [ice]1[;]|4: [weaken]1[;] 5: [shock]2[;] 6: [heal]3,1,var sword = 0; var vanish = 0; var ice = 0; var weaken = 0; var shock = 0; var healing = 0; for(dice in e.gamevar.get(~diceused~)){ if(dice.basevalue == 1){ sword++; }; if(dice.basevalue == 2){ vanish++; }; if(dice.basevalue == 3){ ice++; }; if(dice.basevalue == 4){ weaken++; }; if(dice.basevalue == 5){ shock += 2; }; if(dice.basevalue == 6){ healing += 3; }; }; if(sword > 0){ attack(sword); sfxdamage(target[;]sword); }; if(vanish > 0){ inflict(~ncr_vanish~[;]vanish); sfx(~_vanish~); }; if(ice > 0){ inflict(ICE[;]ice); sfx(~_ice~); }; if(weaken > 0){ inflict(WEAKEN[;]weaken); sfx(~_weaken~); }; if(shock > 0){ inflict(SHOCK[;]shock); sfx(~_shock~); }; if(healing > 0){ attackself(-healing); sfx(~_heal~); };,Random Roll,COUNTDOWN,15,GREEN,,,,,0,NO,NO,,,,,,,,e.gamevar.set(~diceused~[;]e.dicehistory); trace(e.gamevar.get(~diceused~));,,,,,var healing = 0; for(dice in e.gamevar.get(~diceused~)){ if(dice.basevalue == 6){ healing += 3; }; }; if(healing > 0){ attackself(-healing); sfx(~_heal~); };
Bundle of Swaps_downgraded,Do [sword]1 damage for|each dice used,1,var sword = 0; for(dice in e.gamevar.get(~diceused~)){ sword++; }; if(sword > 0){ attack(sword); sfxdamage(target[;]sword); };,Random Roll,COUNTDOWN,10,GREEN,,,,,0,NO,NO,,,,,,,,e.gamevar.set(~diceused~[;]e.dicehistory); trace(e.gamevar.get(~diceused~));,,,,,
Bundle of Swaps_weakened,Do [sword]1 damage for|each dice used,1,var sword = 0; for(dice in e.gamevar.get(~diceused~)){ sword++; }; if(sword > 0){ attack(sword); sfxdamage(target[;]sword); };,Random Roll,COUNTDOWN,15,GREEN,,,,,0,NO,NO,,,,,,,,e.gamevar.set(~diceused~[;]e.dicehistory); trace(e.gamevar.get(~diceused~));,,,,,
Psychic Bolt,Do [sword]3 damage[;] [sword]3 + <d6>|instead if enemy has [vanish]3 or|more vanish,1,if(getstatus(~ncr_vanish~) >= 3 # getstatus(VANISH) > 0){ attack(3 + d); sfxdamage(target[;]3 + d); } else { attack(3); sfxdamage(target[;]3); };,Strobe Light,EVEN,,PINK,simplify,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Psychic Bolt_downgraded,Do [sword]3 damage[;] [sword]5 instead|if enemy has [vanish]3 or more|vanish,1,if(getstatus(~ncr_vanish~) >= 3 # getstatus(VANISH) > 0){ attack(5); sfxdamage(target[;]5); } else { attack(3); sfxdamage(target[;]3); };,Strobe Light,EVEN,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Electric Light,Inflict [shock]<d6>-2 shock[;]|return the dice and destroy|a random dice,1,var dicetodestroy = []; inflict(SHOCK[;]d-2); givedice(d); for (mydice in self.dicepool) { if (mydice.available() && !mydice.intween()) { dicetodestroy.push(mydice); } }; if(dicetodestroy.length > 0) { shuffle(dicetodestroy); dicetodestroy[0].animate(~disappear~); }; sfx(~_shock~);,Jackhammer,MIN4,,YELLOW,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,var dicetodestroy = []; givedice(d); for (mydice in self.dicepool) { if (mydice.available() && !mydice.intween()) { dicetodestroy.push(mydice); } }; if(dicetodestroy.length > 0) { shuffle(dicetodestroy); dicetodestroy[0].animate(~disappear~); };
Electric Light_upgraded,Inflict [shock]<d6>-1 shock[;]|return the dice and destroy|a random dice,1,var dicetodestroy = []; inflict(SHOCK[;]d-1); givedice(d); for (mydice in self.dicepool) { if (mydice.available() && !mydice.intween()) { dicetodestroy.push(mydice); } }; if(dicetodestroy.length > 0) { shuffle(dicetodestroy); dicetodestroy[0].animate(~disappear~); }; sfx(~_shock~);,Jackhammer,MIN3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,var dicetodestroy = []; givedice(d); for (mydice in self.dicepool) { if (mydice.available() && !mydice.intween()) { dicetodestroy.push(mydice); } }; if(dicetodestroy.length > 0) { shuffle(dicetodestroy); dicetodestroy[0].animate(~disappear~); };
Soul Harvest,Enemy shatters at [heart][]15%|hp if they have [vanish]any vanish|when they take damage,1,,Soul Scythe,,,PINK,change_power,change_power,,,0,YES,NO,,1,inflict(~soulharvest~);,,,if(getstatus(~soulharvestdowngraded~) > 0){ inflict(~soulharvest~); removestatus(~soulharvestdowngraded~); },,,,,,,
Soul Harvest_upgraded,Enemy shatters at [heart][]25%|hp if they have [vanish]any vanish|when they take damage,1,,Soul Scythe,,,PINK,,,,,0,YES,NO,,,inflict(~soulharvestupgraded~);,,,if(getstatus(~soulharvestweakened~) > 0){ inflict(~soulharvestupgraded~); removestatus(~soulharvestweakened~); },,,,,,,
Soul Harvest_downgraded,Enemy shatters at [heart][]15%|hp if they have [vanish]3[]+ vanish|when they take damage,1,,Soul Scythe,,,PINK,,,,,0,YES,NO,,,inflict(~soulharvestdowngraded~);,,,if(getstatus(~soulharvest~) > 0){ inflict(~soulharvestdowngraded~); removestatus(~soulharvest~); },,,,,,,
Soul Harvest_weakened,Enemy shatters at [heart][]25%|hp if they have [vanish]3[]+ vanish|when they take damage,1,,Soul Scythe,,,PINK,,,,,0,YES,NO,,,inflict(~soulharvestweakened~);,,,if(getstatus(~soulharvestupgraded~) > 0){ inflict(~soulharvestweakened~); removestatus(~soulharvestupgraded~); },,,,,,,
Foul Breath,Do [sword]<d6> damage[;]|inflict either [fire] burn[;]|[vanish] vanish or [shock] shock,2,attack(d); var randelem = rand([FIRE[;]~ncr_vanish~[;]SHOCK]); inflict(randelem); if(randelem == FIRE) { sfx(~_fire~); } else if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == SHOCK) { sfx(~_shock~); };,Catapult,MAX3|MIN4,,PINK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Foul Breath_upgraded,Do [sword]<d6> damage[;]|inflict [fire] burn[;] [vanish] vanish|and [shock] shock,2,attack(d); inflict(FIRE); sfx(~_fire~); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(SHOCK); sfx(~_shock~);,Catapult,MAX3|MIN4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Abyssal Eye@marshmallowswap,Do [sword]<d6> damage[;]|inflict one of the following:|[vanish]2[][;] [ice]2[][;] [shock]2[][;] [weaken]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([~ncr_vanish~[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == ICE) { sfx(~_ice~); } else if(randelem == SHOCK) { sfx(~_shock~); } else if(randelem == WEAKEN) { sfx(~_weaken~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Abyssal Eye@marshmallowswap_upgraded,Do [sword]<d6> damage[;]|inflict [vanish]1[][;] [ice]1[][;] [shock]1[][;]|[weaken]1[][;] [poison]1[] and [blind]1,2,attack(d); sfxdamage(target[;]d); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(ICE); sfx(~_ice~); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~); inflict(POISON); sfx(~_poison~); inflict(BLIND); sfx(~_blind~);,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Abyssal Eye@marshmallowswap_downgraded,Do [sword]<d6> damage[;]|inflict one of the following:|[ice]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([ICE[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ICE) { sfx(~_ice~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air,Do [sword]<d6> damage[;]|inflict one of the following:|[fire]2[][;] [vanish]2[][;] [shock]2[][;] [weaken]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([FIRE[;]~ncr_vanish~[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == FIRE) { sfx(~_fire~); } else if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == SHOCK) { sfx(~_shock~); } else if(randelem == WEAKEN) { sfx(~_weaken~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air_upgraded,Do [sword]<d6> damage[;]|inflict [fire]1[][;] [vanish]1[][;] [shock]1[][;]|[weaken]1[][;] [poison]1[] and [blind]1,2,attack(d); sfxdamage(target[;]d); inflict(FIRE); sfx(~_fire~); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~); inflict(POISON); sfx(~_poison~); inflict(BLIND); sfx(~_blind~);,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air_downgraded,Do [sword]<d6> damage[;]|inflict one of the following:|[vanish]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([~ncr_vanish~[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air@marshmallowswap,Do [sword]<d6> damage[;]|inflict one of the following:|[vanish]2[][;] [fire]2[][;] [shock]2[][;] [weaken]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([~ncr_vanish~[;]FIRE[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == ~ncr_vanish~) { sfx(~_vanish~); } else if(randelem == FIRE) { sfx(~_fire~); } else if(randelem == SHOCK) { sfx(~_shock~); } else if(randelem == WEAKEN) { sfx(~_weaken~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air@marshmallowswap_upgraded,Do [sword]<d6> damage[;]|inflict [vanish]1[][;] [fire]1[][;] [shock]1[][;]|[weaken]1[][;] [poison]1[] and [blind]1,2,attack(d); sfxdamage(target[;]d); inflict(~ncr_vanish~); sfx(~_vanish~); inflict(FIRE); sfx(~_ice~); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~); inflict(POISON); sfx(~_poison~); inflict(BLIND); sfx(~_blind~);,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Stagnant Air@marshmallowswap_downgraded,Do [sword]<d6> damage[;]|inflict one of the following:|[fire]2[][;] [poison]2[][;] [blind]2,2,attack(d); sfxdamage(target[;]d); var randelem = rand([FIRE[;]POISON[;]BLIND]); inflict(randelem[;]2); if(randelem == FIRE) { sfx(~_fire~); } else if(randelem == POISON) { sfx(~_poison~); } else if(randelem == BLIND) { sfx(~_blind~); };,Stardust,MAX2|MIN5,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
