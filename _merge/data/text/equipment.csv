Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Inventor Gadgets,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,self.setvar(~underwhelm~|5); self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0); /*var goldgadgets = loadtext(~gadgetsthatshowgold~); for(skill in self.getskillcard().skills) if(goldgadgets.indexOf(skill.name) != -1) self.getskillcard().addtag(~showgold~);*/ for(skill in self.getskillcard().skills) if(skill.script.indexOf(self.gold) != -1) self.getskillcard().addtag(~showgold~);,/*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~); self.setvar(~giveblades~|self.getvar(~giveblades~) - 1); }*/ self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0); self.getskillcard().removetag(~showgold~);,var e = self.getskillcard(); /*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~|true|false); self.setvar(~giveblades~|self.getvar(~giveblades~) - 1);  } while(self.getvar(~givebladesplus~) > 0) { giveequipment(~Everblade+~|true|false); self.setvar(~givebladesplus~|self.getvar(~givebladesplus~) - 1);  }*/ self.setvar(~phillip~|false); self.setvar(~grolluses~|3); self.setvar(~smashuses~|3); for(myskill in e.skills) { if(myskill.name == ~Gadget Roll~) { myskill.description = ~Reroll a dice (uses: 3)~; } if(myskill.name == ~Mirror Smash~) { myskill.description = ~-3 [heart][][;] get dice (uses: 3)~; } } /* for(myskill in e.skills) { if(myskill.name == ~Emulator~) { self.setvar(~emulatorchange~|e.skills.indexOf(myskill)); } } */ if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.script.split(~Gadget.reactivate(self| ALL);~).length > 1) { eq.script = eq.script.split(~Gadget.reactivate(self| ALL);~).join(~Gadget.reactivate(self|ALL); for(myskill in self.getskillcard().skills) { if(myskill.name == \~Gadget Roll\~) { self.setvar(\~grolluses\~|self.getvar(\~grolluses\~) + 1); var a = \~\~ + self.getvar(\~grolluses\~); trace(a); var b = \~\~ + (self.getvar(\~grolluses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } if(myskill.name == \~Mirror Smash\~) { self.setvar(\~smashuses\~|self.getvar(\~smashuses\~) + 1); var a = \~\~ + self.getvar(\~smashuses\~); trace(a); var b = \~\~ + (self.getvar(\~smashuses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); if(myskill.description.split(\~-4 [\~).length > 1) { myskill.description = myskill.description.split(\~-4 [\~).join(\~-3 [\~); } } }~); } } } self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0);,var docursesfx = false; var doflashnshake = false; for(myskill in e.skills) { if(myskill.description.indexOf(~[sword]7 dmg (passive: get [curse]1[])~) != -1) { docursesfx = true; doflashnshake = true; inflictself(CURSE); } } if(self.limitbreak.description.indexOf(~[sword]7 dmg (passive: get [curse]1[])~) != -1) { docursesfx = true; inflictself(CURSE); } if(docursesfx) sfx(~_curse~); if(doflashnshake) e.animate(~flashandshake~);,if(self.hasstatus(~ncr_lessfluff~)) { removestatusself(~ncr_lessfluff~); } self.setvar(~invgadgets_eqsused~|self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~|self.getvar(~invgadgets_eqsused_display~) + 1); },,/*if(target.hp <= 0 && self.layout == ~DECK~) { self.setvar(~equipmenttoscrap~|self.equipment); }*/ for(eq in self.equipment) if(eq.hastag(~preservesgadget~)) eq.gadget = Gadget.getcurrentgadget(self);,,,,
Robot Calculate,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0);,self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0); self.setvar(~grolluses~|3); self.setvar(~smashuses~|3);,,self.setvar(~invgadgets_eqsused~|self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~|self.getvar(~invgadgets_eqsused_display~) + 1); },,,,,,
Witch Spellbook,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,for(i in 1...7) { if(Spellbook.spellname(i) == ~Switchblade@odd~) Spellbook.changespell(i|~Switchblade@even~); else if(Spellbook.spellname(i) == ~Switchblade@even~) Spellbook.changespell(i|~Switchblade@odd~); },,,,,,,,
Buster Sword,Do [sword]<d6> damage[;]|immune to errors,1,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,excludefromrandomlists|errorimmune,,,,,,,,,,,,
Ultima Weapon,Do [sword]<d6> damage[;]|double on jackpot,1,if (self.roll_jackpot > 0){ attack(d * 2); } else { attack(d); },Plasma Gun,NORMAL,,YELLOW,add2,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Starspear,Do [sword]6 damage[;]|add 2x random status,1,attack(6); sfxdamage(target|6); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { sfx(~_vanish~|~~|0.2); inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,REQUIRE6,,PINK,change_power,doublerequirements,,,0,NO,NO,,1,,,,,,,,,,,
Starspear_upgraded,Do [sword]<d6> damage[;]|add 2x random status,1,attack(d); sfxdamage(target|d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { sfx(~_vanish~|~~|0.2); inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,MIN5,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Seize,Lock [lock]1 dice,2,inflict(LOCK| 1); bonus(1000);,Copyright Strike,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Fool's Fire,Inflict [vanish]Vanish_ALL,2,inflict(VANISH);,Mass Deception,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fool's Frost,Inflict [vanish]Vanish_ALL,2,inflict(VANISH);,Mass Deception,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,,,,,,,,,,,,,
Fuse,Absorbs an error when|playing You Choose[;] You Lose,1,,Time Stop,,,GRAY,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mechanical Arm,Do [sword]<dicerolled> damage[;]|add [sword]1 each roll,1,attack(self.roll_totaldice + 1);,Lucky Shot,EVEN,,RED,simplify,complicate,,,0,NO,NO,,,,,if(self != null && !self.usecpuinsteadofdice) self.roll_totaldice = self.dice + self.extradice + self.bonusdice;,,,,,,,,
Forcefield,Add [shield]<dicerolled> shield[;]|add [shield]1 each roll,2,inflictself(SHIELD| (self.roll_totaldice + 1));,Protection,ODD,,ORANGE,simplify,complicate,,,0,YES,NO,,,,,if(self != null && !self.usecpuinsteadofdice) self.roll_totaldice = self.dice + self.extradice + self.bonusdice;,,,,,,,,
Incoming!,Add a Juggling Ball to|your deck for this fight,2,addjestercard(~juggling ball~); self.changebattlevar(~jugglingballs~| 1);,Replicate,COUNTDOWN,5,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Delete,Permanently delete the|first card in your hand,2,var firstcard = Deck.getcard(0); if(firstcard != null) firstcard.delete();,Time Stop,COUNTDOWN,5,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable,,,,,,,,,,,,
Forge,Permanently upgrade the|first card in your hand|[gray](once per battle),2,/*$if(self.layout != ~DECK~) { var firstcard = Deck.getcard(0); var firstequipment = null; if(firstcard != null) firstequipment = firstcard.equipment; if(firstequipment != null && !firstequipment.upgraded && !firstequipment.originallyupgraded && firstequipment.isready() && firstequipment.upgradetype != ~~) { var oldx = firstequipment.x; var oldy = firstequipment.y; var oldrcd = firstequipment.remainingcountdown; firstequipment.create(firstequipment.name|true|firstequipment.weakened|true); firstequipment.x = oldx; firstequipment.y = oldy; if(firstequipment.remainingcountdown > oldrcd) { firstequipment.remainingcountdown = oldrcd; } firstequipment.animate(~flashandshake~); sfx(~upgradeequipment~); } else { self.textparticle(~No effect!~); } } else { var completed = false; var eqlist = []; for(eq in self.equipment) { eqlist.push(eq); } if(eqlist.length != 0) {for(eq in eqlist) if(!eq.upgraded && !eq.originallyupgraded && eq.isready() && eq != e && eq != self.getskillcard() && eq.upgradetype != ~~ && new elements.Equipment(eq.name + ~+~).size <= eq.size) { var oldx = eq.x; var oldy = eq.y; var oldrcd = eq.remainingcountdown; eq.create(eq.name|true|eq.weakened|!self.isplayer); /* bool args for e.create: upgraded; weakened; deckupgrade */ eq.x = oldx; eq.y = oldy; if(eq.remainingcountdown > oldrcd) { eq.remainingcountdown = oldrcd; } eq.animate(~flashandshake~); sfx(~upgradeequipment~); completed = true; break; } } if(!completed) { self.textparticle(~No effect!~); } }$*/,,COUNTDOWN,16,YELLOW,halfcountdown,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spare Cycles,Do [sword]<leftovercpu> damage[;]| [sword]1 for each unused CPU point,1,attack(d);,Overload,COUNTDOWN,12,BRIGHTCYAN,halfcountdown,noeffect,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spring Equinox,Place two copies of the|next spell you cast,1,inflictself(~doublecast~);,,ODD,,YELLOW,simplify,complicate,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Harvest Scythe,Consume spell in slot <d6>|to do [sword]<quadruple> damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(4 * d); Spellbook.erase(d); },,NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Harvest Scythe_upgraded,Consume spell in slot <d6>|to do [sword]<quintuple> damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(5 * d); Spellbook.erase(d); },,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Call for Backup Robot,Slot Machine|Get random equipment,2,if(self.layout != ~DECK~) { var exceptions = [~skillcard~|~excludefromrandomlists~|~alternateversion~|~robotonly~|~witchonly~|~inventoronly~|~onceperbattle~]; if(self.usecpuinsteadofdice) exceptions.remove(~robotonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~witch~) exceptions.remove(~witchonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~inventor~) exceptions.remove(~inventoronly~); var geteqs = getequipmentlist(null|[]|exceptions); giveequipment(rand(geteqs)); } //$if(self.layout == ~DECK~) replacemewith(rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~onceperbattle~|~alternateversion~]))| -1);$,Reversal,,,GRAY,,change_power,,none,0,YES,NO,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Witch,Magic Trick|Discard current hand,2,//$e.preventdefault = true; Deck.discardhand();$,Regenerate,,,PURPLE,,change_power,,none,0,YES,NO,excludefromrandomlists|powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Inventor,Inspiration|Copy next card,2,if(self.layout != ~DECK~) { e.preventdefault = true; var eqlist = []; for(eq in self.equipment) { if(eq.skillcard == ~~ ) { eqlist.push(eq); } } if(self.stolencard) { eqlist.push(self.stolencard); } if(eqlist[eqlist.indexOf(e) + 1] != null) { giveequipment(eqlist[eqlist.indexOf(e) + 1].name + eqlist[eqlist.indexOf(e) + 1].namemodifier); } else { self.textparticle(~No next card!~); } } //$if(self.layout == ~DECK~) { e.preventdefault = true; Deck.copynextcard(self| e); }$,Time Stop,,,ORANGE,,change_power,,none,0,YES,NO,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BRIGHTCYAN,,change_power,,none,0,NO,NO,excludefromrandomlists|powercard,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BRIGHTCYAN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard,,,,,,,,,,,,
Call for Backup Witch?,Multicard!|Add an extra card to|your hand (this turn),2,//$e.preventdefault - true; Deck.sethandsize(4); Deck.lookahead = 0;$,,,,PURPLE,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard,,,,,,,,Deck.sethandsize(3); Deck.lookahead = 3;,,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Inventor?,Random Access|Copy a random item|from your deck,2,if(self.layout != ~DECK~) { var eqlist = []; for(eq in self.equipment) { if(eq.skillcard == ~~ && eq != e ) { eqlist.push(eq); } } if(self.stolencard) { eqlist.push(self.stolencard); } if(eqlist.length > 0) { giveequipment(rand(eqlist).name + rand(eqlist).namemodifier); } else { self.textparticle(~No effect!~); } } //$if(self.layout == ~DECK~) { replacemewith(rand(Deck.getcardlist(~all~))| -1); } $,Emulator,,,ORANGE,,change_power,,none,0,YES,NO,alternateversion|powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Spatulasword,Do [sword]<d6> damage[;] and|flip the dice upside down,2,attack(d); givedice(7 - d);,Megaflip,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(7 - d);
Spatulasword_upgraded,Flip the dice upside down[;]|and do [sword]<d6> damage,2,attack(7 - d); givedice(7 - d);,Megaflip,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7 - d);
Spatulasword_downgraded,Flip a dice upside down,2,givedice(7 - d);,Megaflip,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7 - d);
Bear Hug,Do [sword]<double> damage[;]|lose a dice|[80%][gray]''Let it out''[],2,attack(d * 2); self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Plexiglass,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,var vegetablegame = [~I'm here for you~|~I understand~|~There There~|~Don't worry~|~Let it out~|~You're not alone~|~It's ok~]; for(i in 0...vegetablegame.length) { if(e.fulldescription.indexOf(vegetablegame[i]) != -1) { var phrase = vegetablegame[i]; vegetablegame.remove(phrase); e.fulldescription = e.fulldescription.split(phrase).join(rand(vegetablegame)); break; } },,,,,,,,
Action!,Keep a <d6> for next turn,1,inflictself(~stash~+d|1); inflictself(~illuminate~);,Magic Dice,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,finale,1,,,,,,,,,,,
Action!_upgraded,Keep two <d6>s for next turn,1,if(actualdice[0].basevalue == actualdice[1].basevalue) { inflictself(~stash~+actualdice[0].basevalue|2); inflictself(~illuminate~); } else { inflictself(~stash~+actualdice[0].basevalue|1); inflictself(~stash~+actualdice[1].basevalue|1); inflictself(~illuminate~); },Magic Dice,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Bow Wow Wow,Make unavailable cards|available[;] return dice,2,if(self.layout == ~DECK~) { var cardlist = Deck.getcards(~all~); for(c in cardlist){ if(!c.equipment.availablethisturn) { c.equipment.availablethisturn = true; c.equipment.animate(~flash~); } } givedice(d); } else { for(eq in self.equipment) { if(!eq.availablethisturn && eq.show) { eq.availablethisturn = true; eq.animate(~flash~); } } givedice(d); },Sustainability,EVEN,,PINK,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Table Slam,Reroll all unused dice[;]|and return this dice,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice(d);,Reroll,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Melody,Inflict [weaken]1 weaken,2,inflict(WEAKEN| 1);,Burrower,NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Melody_upgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN| 2);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Chorus,Roll a dice for every|[weaken]1 weaken on enemy,1,var numweaken = getstatus(WEAKEN); if(numweaken > 0) { var returndice = []; for(i in 0 ... numweaken) { returndice.push(rand([1|2|3|4|5|6])); } givedice(returndice); },Burrower,MAX3,,ORANGE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Fortify,Increase [shield] shield|by 50 percent,1,inflictself(SHIELD| getstatusself(SHIELD) * 0.5);,Barricade,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fortify_upgraded,Double [shield] shield,1,inflictself(SHIELD| getstatusself(SHIELD));,Barricade,COUNTDOWN,6,ORANGE,,,,,0,,,,,,,,,,,,,,,
Fortify_downgraded,Increase [shield] shield|by 25 percent,1,inflictself(SHIELD| getstatusself(SHIELD) * 0.25);,Barricade,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Front Line,Lose [heart]3 health[;] gain|[shield]3 shield[;] return the dice,2,pierceattackself(3); inflictself(SHIELD| 3); givedice(d);,Hustle,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Front Line_upgraded,Lose [heart]6 health[;] gain|[shield]6 shield[;] return the dice,2,pierceattackself(6); inflictself(SHIELD| 6); givedice(d);,Hustle,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Princess Guard,Do [sword]<d6> damage|25% chance to add [shield]<d6>,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d); ,Safeguard,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d); 
Princess Guard_upgraded,Do [sword]<d6> damage|75% chance to add [shield]<d6>,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d);,Safeguard,MAX4,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d);
Princess Guard_downgraded,Do [sword]<d6> damage,1,attack(d);,Safeguard,MAX4,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Venus Gospel,Do [weaken]<d6> damage|25% chance +[weaken]2 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 2); } attack(d| WEAKEN);,Scream,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Venus Gospel_upgraded,Do [weaken]<d6> damage|25% chance +[weaken]3 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 3); } attack(d| WEAKEN);,Scream,MAX5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Venus Gospel_downgraded,Do [weaken]<d6> damage,1,attack(d| WEAKEN);,Scream,MAX5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Snapdragon,Do [sword]3 damage[;]|on 6[;] gain [mana]2 mana,1,attack(3); if(d == 6) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(d == 6) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Snapdragon_upgraded,Do [sword]3 damage[;]|on even[;] gain [mana]2 mana,1,attack(3); if(d % 2 == 0) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Snapdragon_downgraded,Do [sword]3 damage[;]|on 3[;] gain [mana]2 mana,1,attack(3); if(d == 3) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 3) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,Random Roll,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); }
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); }
Fruit Bowl_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Enchanted Shield,Add [shield]<d6> shield|(Cost [mana]2[]: +[shield]<d6> shield),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); inflictself(SHIELD| d * 2); } else { inflictself(SHIELD| d); } ,Protection,MAX3,,ORANGE,increaserange,decreaserange,,,0,YES,NO,,1,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); attack(10); } else { attack(5); } ,Blowtorch,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); }
Winds of Winter,Do [sword]1 damage for each|[mana]1 mana you have,1,if(getstatusself(MANA) > 0) {attack(getstatusself(MANA)); },Drunken Boxing,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Stew Pot,Do [sword]1 damage[;] reroll dice|(If [mana]>=6: return 5 or 6),1,if(getstatusself(MANA) >= 6) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(MANA) >= 6) { givedice(rand([5|6])); } else { givedice(); }
Stew Pot_upgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=4: return 5 or 6),1,if(getstatusself(MANA) >= 4) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) >= 4) { givedice(rand([5|6])); } else { givedice(); }
Stew Pot_downgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=8: return 5 or 6),1,if(getstatusself(MANA) >= 8) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) >= 8) { givedice(rand([5|6])); } else { givedice(); }
Bronze Cauldron,Do [sword]2[;] get an odd dice|[gray](Reuseable),1,attack(2); givedice(rand([1|3|5]));,Reroll,EVEN,,ORANGE,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Bronze Cauldron_upgraded,Do [sword]3[;] get an odd dice|[gray](Reuseable),1,attack(3); givedice(rand([1|3|5]));,Reroll,EVEN,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Bronze Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Reroll,EVEN,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(10); } else { attack(5); } ,Glisten,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(14); } else { attack(7); } ,Glisten,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Northern Lights,Get 2x<d6>s next turn|(If [mana]>=5: get 3 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d|3); inflictself(~illuminate~); } else { inflictself(~stash~+d|2); inflictself(~illuminate~); } ,Magic Dice,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Northern Lights_upgraded,Get 4x<d6>s next turn|(If [mana]>=5: get 6 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d|6); inflictself(~illuminate~); } else { inflictself(~stash~+d|4); inflictself(~illuminate~); } ,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Daffodil,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,Glisten,MIN4,,YELLOW,change_power,decreaserange,,,0,YES,NO,,1,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,,
Daffodil_upgraded,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,Glisten,MIN2,,YELLOW,,,,,0,YES,NO,,,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,,
Winter Solstice,Do [sword]<d6> damage|(If [mana]>=12: triple damage),1,if(getstatusself(MANA) >= 12) { attack(d * 3); } else { attack(d); } ,Glisten,ODD|ODD,,PURPLE,simplify,complicate,,,0,NO,NO,,2,,,,,,,,,,,
Gladioli,Do [sword]<d6> damage[;]|gain [mana]2 mana on 2 or less,1,attack(d); if(d <= 2) { inflictself(MANA|2); },Glisten,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,if(d <= 2) { inflictself(MANA|2); }
Gladioli_upgraded,Do [sword]<d6> damage[;]|gain [mana]2 mana on 4 or less,1,attack(d); if(d <= 4) { inflictself(MANA|2); },Glisten,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d <= 4) { inflictself(MANA|2); }
Picnic Basket,Keep a <d6> for next turn,1,inflictself(~stash~+d|1); inflictself(~illuminate~);,Magic Dice,NORMAL,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Picnic Basket_upgraded,Keep two <d6>s for next turn,1,if(actualdice[0].basevalue == actualdice[1].basevalue) { inflictself(~stash~+actualdice[0].basevalue|2); inflictself(~illuminate~); } else { inflictself(~stash~+actualdice[0].basevalue|1); inflictself(~stash~+actualdice[1].basevalue|1); inflictself(~illuminate~); },Magic Dice,NORMAL|NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,//$if(self.gold > 0){ self.gold--; replacemewith(rand([~Dark Shadow~|~Bear Maul~|~Two Handed Sword~|~Tower Shield~|~Earthquake~|~Very Good Sword~|~Counterfeit~|~Spatulasword~|~Quarterstaff~])| -1); } else { self.textparticle(~Can't afford!~); }$,Harvest,,,GREEN,,change_power,,none,0,YES,NO,alternateversion|powercard,,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,Double Whammy,,,GRAY,,change_power,,none,0,YES,NO,alternateversion|powercard,,,,,,,,,,,,
Hijinx,Reduce all Jinx|countdowns by [jinx]1,2,boostjinxcountdowns(self| 1); boostjinxcountdowns(target| 1);,Down Low,EVEN,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Hijinx_upgraded,Reduce all Jinx|countdowns by [jinx]2,2,boostjinxcountdowns(self| 2); boostjinxcountdowns(target| 2);,Down Low,EVEN,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Slapsies,In [jinx]<d6> turns[;]|do [sword]<triple> damage,2,jinx(~Slapsies~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 3));  sfx(~_thinghappens~);,Drunken Boxing,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slapsies_upgraded,In [jinx]<d6> turns[;]|do [sword]<quadruple> damage,2,jinx(~Slapsies+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 4)); sfx(~_thinghappens~);,Drunken Boxing,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Slapsies_downgraded,In [jinx]<d6> turns[;]|do [sword]<d6> damage,2,jinx(~Slapsies-~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|d); sfx(~_thinghappens~);,Drunken Boxing,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Mercy,In [jinx]6 turns[;]|do [fire]20 damage,2,jinx(~Mercy~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|6|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mercy_upgraded,In [jinx]5 turns[;]|do [fire]20 damage,2,jinx(~Mercy+~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|5|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Mercy_downgraded,In [jinx]7 turns[;]|do [fire]20 damage,2,jinx(~Mercy-~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|7|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Concentration,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,Health Pack,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Concentration_upgraded,In [jinx]<d6> turns[;]|recover <triple> health,2,jinx(~Concentration+~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 3)); sfx(~_thinghappens~);,Health Pack,MAX4,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Concentration_downgraded,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration-~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,Health Pack,REQUIRE4,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Lojinx,Do [sword]2 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 2); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lojinx_upgraded,Do [sword]3 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 3); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Lojinx_downgraded,Do [sword]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Sour Candy,Heal [heal]2. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(2); sfxdamage(target|2); } else if(self.maxhp - self.hp == 1) { attack(1); attackself(-1); sfxdamage(target|1); } else {  attackself(-2); sfx(~_heal~); },Rejuvenate,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sour Candy_upgraded,Heal [heal]3. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(3); sfxdamage(target|3); } else if(self.maxhp - self.hp == 1) { attack(2); attackself(-1); sfxdamage(target|2); } else if(self.maxhp - self.hp == 2) { attack(1); attackself(-2); sfxdamage(target|1); } else {  attackself(-3); sfx(~_heal~); },Rejuvenate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sour Candy_downgraded,Heal [heal]1 health,1,attackself(-1); sfx(~_heal~); ,Rejuvenate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Let,Lose [heart]2 hp[;] then heal [heart]1,1,pierceattackself(2); attackself(-1);,Hustle,ODD,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blood Let_upgraded,Lose [heart]4 hp[;] then heal [heart]2,1,pierceattackself(4); attackself(-2);,Hustle,ODD,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Let_downgraded,Lose [heart]2 hp|[gray](Reuseable),1,pierceattackself(2);,Hustle,ODD,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Shard,Do [sword]9 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(9); self.extradice++; },Curved Mirror,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,self.extradice++; sfx(~magic_gaindice~|~~|0.2);
Mirror Shard_upgraded,Do [sword]12 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(12); self.extradice++; },Curved Mirror,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice++; sfx(~magic_gaindice~|~~|0.2);
Mirror Shard_downgraded,Do [sword]9 damage,2,attack(9);,Curved Mirror,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Kapow,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +1 for|each kapow used this turn,2,attack(self.getvar(~kapowcount~) + 1); self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,,
Kapow_upgraded,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +2 for|each kapow used this turn,2,attack((self.getvar(~kapowcount~) + 1) * 2); self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,YELLOW,,,,,0,NO,NO,,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,,
Kapow_downgraded,Increase Kapow counter,2,self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,YELLOW,,,,,0,NO,NO,,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,,
Big Moment,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Rod,COUNTDOWN,7,ORANGE,change_power,change_power,,,2,NO,NO,finale,,,,,,,,,,,,
Big Moment_upgraded,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Rod,COUNTDOWN,7,ORANGE,,,,,4,NO,NO,finale,,,,,,,,,,,,
Big Moment_downgraded,Do [sword]7 damage,2,attack(7);,Rod,COUNTDOWN,7,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Memory Leak,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,Underwhelm,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0); while(e.getvar(~rollcheck~) < self.dice + self.bonusdice + self.extradice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,,
Memory Leak_upgraded,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,Underwhelm,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0); while(e.getvar(~rollcheck~) < self.dice + self.bonusdice + self.extradice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,,
Flaming Sword,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d|FIRE); inflict(FIRE| 2);,Blowtorch,MAX5|MAX5,,RED,change_power,complicate,,,0,NO,NO,,1,,,,e.animate(~flashandshake~); if(self.usecpuinsteadofdice) inflictself(FIRE| 1); sfx(~_fire~); if(!self.usecpuinsteadofdice) { var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE| 1); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } /*-we walked in?*/ },,,,,,,
Flaming Sword_upgraded,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d|FIRE); inflict(FIRE| 2);,Blowtorch,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); if(self.usecpuinsteadofdice) inflictself(FIRE| 1); sfx(~_fire~); if(!self.usecpuinsteadofdice) { var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE| 1); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } /*-we walked in?*/ },,,,,,,
Frozen Sword,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d|ICE); inflict(ICE| 2);,Flash Freeze,MAX5|MAX5,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,1,,,,e.animate(~flashandshake~); if(self.usecpuinsteadofdice) inflictself(ICE| 1); sfx(~_ice~); if(!self.usecpuinsteadofdice) { var oldfreeze = 0; var oldaltfreeze = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { oldfreeze = stat.value; } if(stat.type == ~alternate_ice~) { oldaltfreeze = stat.value; } } } inflictself(ICE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~ice~ && stat.value != oldfreeze) { inflictwhat = stat.type; } if(stat.type == ~alternate_ice~ && stat.value != oldaltfreeze) { inflictwhat = stat.type; } } if(inflictwhat == ~ice~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } } if(inflictwhat == ~alternate_ice~) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { mydice.animate(~alternate_ice~); } } } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } },,,,,,,
Frozen Sword_upgraded,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d|ICE); inflict(ICE| 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); if(self.usecpuinsteadofdice) inflictself(ICE| 1); sfx(~_ice~); if(!self.usecpuinsteadofdice) { var oldfreeze = 0; var oldaltfreeze = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { oldfreeze = stat.value; } if(stat.type == ~alternate_ice~) { oldaltfreeze = stat.value; } } } inflictself(ICE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~ice~ && stat.value != oldfreeze) { inflictwhat = stat.type; } if(stat.type == ~alternate_ice~ && stat.value != oldaltfreeze) { inflictwhat = stat.type; } } if(inflictwhat == ~ice~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } } if(inflictwhat == ~alternate_ice~) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { mydice.animate(~alternate_ice~); } } } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } },,,,,,,
Slime Ball,Add [poison]2 poison,1,inflict(POISON| 2);,Poison Arrow,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Slime Ball_upgraded,Add [poison]3 poison,1,inflict(POISON| 3);,Poison Arrow,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mood Change,Change the weather[;]|recover [heal]3 health,2,attackself(-3); if(self.isplayer) {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~); /*it used to be that you could only have mist *replaced* and not given because i wanted stack vanish to be a secretive secret*/  var weather = rand(replacewith);  var howmanyreplace = 0;  var replacearray = [];  var modifiers = [];  for(eq in self.equipment) {   if(equiptoreplace.indexOf(eq.name) != -1) {    howmanyreplace++;    modifiers.push(eq.namemodifier);   }  }  if(howmanyreplace == 0) {   self.textparticle(~No weather!~);  } else {   for(i in 0...howmanyreplace) {    replacearray.push(weather + modifiers[i]);   }   for(replacename in equiptoreplace) {    removeequipment(replacename);   }   replacearray.push(~Mood Change~ + e.namemodifier);   e.name = ~deleteme~;   removeequipment(~deleteme~);   giveequipment(replacearray|true|false);  } } else {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~);  var weather = rand(replacewith);  for(replacename in equiptoreplace) {   removeequipment(replacename);  }  e.name = ~deleteme~;  var mymodifier = e.namemodifier;  removeequipment(~deleteme~);  giveequipment([weather|weather|weather|~Mood Change~ + mymodifier]|true|false); },Regenerate,COUNTDOWN,5,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_upgraded,Change the weather[;]|recover [heal]6 health,2,attackself(-6); if(self.isplayer) {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~); /*it used to be that you could only have mist *replaced* and not given because i wanted stack vanish to be a secretive secret*/  var weather = rand(replacewith);  var howmanyreplace = 0;  var replacearray = [];  var modifiers = [];  for(eq in self.equipment) {   if(equiptoreplace.indexOf(eq.name) != -1) {    howmanyreplace++;    modifiers.push(eq.namemodifier);   }  }  if(howmanyreplace == 0) {   self.textparticle(~No weather!~);  } else {   for(i in 0...howmanyreplace) {    replacearray.push(weather + modifiers[i]);   }   for(replacename in equiptoreplace) {    removeequipment(replacename);   }   replacearray.push(~Mood Change~ + e.namemodifier);   e.name = ~deleteme~;   removeequipment(~deleteme~);   giveequipment(replacearray|true|false);  } } else {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~);  var weather = rand(replacewith);  for(replacename in equiptoreplace) {   removeequipment(replacename);  }  e.name = ~deleteme~;  var mymodifier = e.namemodifier;  removeequipment(~deleteme~);  giveequipment([weather|weather|weather|~Mood Change~ + mymodifier]|true|false); },Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mood Change_downgraded,Change the weather,2,if(self.isplayer) {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~); /*it used to be that you could only have mist *replaced* and not given because i wanted stack vanish to be a secretive secret*/  var weather = rand(replacewith);  var howmanyreplace = 0;  var replacearray = [];  var modifiers = [];  for(eq in self.equipment) {   if(equiptoreplace.indexOf(eq.name) != -1) {    howmanyreplace++;    modifiers.push(eq.namemodifier);   }  }  if(howmanyreplace == 0) {   self.textparticle(~No weather!~);  } else {   for(i in 0...howmanyreplace) {    replacearray.push(weather + modifiers[i]);   }   for(replacename in equiptoreplace) {    removeequipment(replacename);   }   replacearray.push(~Mood Change~ + e.namemodifier);   e.name = ~deleteme~;   removeequipment(~deleteme~);   giveequipment(replacearray|true|false);  } } else {  var replacewith = [~Hurricane~|~Thunder Storm~|~Heatwave~|~Snowstorm~|~Thunder Storm~|~Heatwave~|~Snowstorm~];  var equiptoreplace = replacewith.concat([~Mist~]); replacewith.push(~Mist~);  var weather = rand(replacewith);  for(replacename in equiptoreplace) {   removeequipment(replacename);  }  e.name = ~deleteme~;  var mymodifier = e.namemodifier;  removeequipment(~deleteme~);  giveequipment([weather|weather|weather|~Mood Change~ + mymodifier]|true|false); },Regenerate,COUNTDOWN,5,GREEN,,,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 1,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@1~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 2,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@2~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 3,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@3~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 4,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@4~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 5,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@5~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 6,Unlocks Keyblade[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@6~; giveequipment(~Keyblade~ + playermodifier|true|false|e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 1_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@1~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 2_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@2~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 3_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@3~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 4_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@4~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 5_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@5~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Lock 6_upgraded,Unlocks Keyblade+[;]|return the dice,1,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@6~; giveequipment(~Keyblade~ + playermodifier + ~+~|true|false|e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Crystallize,Create a random|crystal weapon,2,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@crystallize~; giveequipment(rand([~Earth~|~Fire~|~Air~|~Ice~|~Power~|~Smokey~|~Life~|~Hollow~|~Energy~]) + ~ Crystal~ + playermodifier| true| false| e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,change_requirements,change_power,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_upgraded,Create a random|crystal weapon,2,var playermodifier = ~~; if(self.isplayer) playermodifier = ~@crystallize~; giveequipment(rand([~Earth~|~Fire~|~Air~|~Ice~|~Power~|~Smokey~|~Life~|~Hollow~|~Energy~]) + ~ Crystal~ + playermodifier + ~+~| true| false| e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Missing Score,Do [sword]<d6> damage|25% chance to return dice,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); },Dice Bash,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_upgraded,Do [sword]<d6> damage|75% chance to return dice,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); givedice(d); },Dice Bash,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missing Score_downgraded,Do [sword]<d6> damage,1,attack(d);,Dice Bash,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Four Leaf Clover,Double the success odds|of chance based items,1,inflictself(~luck~);,Curved Mirror,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Four Leaf Clover_upgraded,Chance based items|work 100% of the time,1,inflictself(~luck+~);,Curved Mirror,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Four Leaf Clover_downgraded,50% chance of either|curse or good luck,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; }  if(chance(odds)){ inflictself(~luck~); } else { inflictself(CURSE); },Curved Mirror,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Premium Heart,Do [sword]<d6> damage|10% chance of Fury,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); },Fury,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); }
Premium Heart_upgraded,Do [sword]<d6> damage|25% chance of Fury,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); },Fury,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflictself(FURY); sfx(~_fury~|~~|0.2); }
Premium Heart_downgraded,Do [sword]<d6> damage,1,attack(d);,Fury,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Short Circuit,Do [sword]<d6> damage[;]|add random status,1,attack(d); sfxdamage(target|d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~); sfx(~_vanish~|~~|0.2); } else { inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,LOCKED4,,RED,change_requirements,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Circuit_upgraded,Do [sword]<d6> damage[;]|add random status,1,attack(d); sfxdamage(target|d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~); sfx(~_vanish~|~~|0.2); } else { inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Circuit_downgraded,Add random status,1,var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~); sfx(~_vanish~|~~|0.2); } else { inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,LOCKED4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); sfxdamage(target|d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { sfx(~_vanish~|~~|0.2); inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,EVEN,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dark Shadow_upgraded,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); sfxdamage(target|d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { sfx(~_vanish~|~~|0.2); inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Dark Shadow_downgraded,Add 2x random status,2,var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { sfx(~_vanish~|~~|0.2); inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); },Stardust,EVEN,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Determination,Do [sword]4 damage[;]|add random status,1,attack(4); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~); } else { inflict(randstatus); },Stardust,COUNTDOWN,10,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Determination_upgraded,Do [sword]4 damage[;]|add 2x random status,1,attack(4); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~|2); } else { inflict(randstatus|2); },Stardust,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Determination_downgraded,Add random status,1,var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON|VANISH]); if(randstatus == ~vanish~) { inflict(~ncr_vanish~); } else { inflict(randstatus); },Stardust,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Screwdriver,Do [sword]<d6> damage[;]|on 6[;] reactivate gadget,2,attack(d); if(d == 6) { Gadget.reactivate(self| ALL); },Efficiency,NORMAL,,PURPLE,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6) { Gadget.reactivate(self| ALL); }
Screwdriver_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Screwdriver_weakened,Do [sword]<d6> damage,1,attack(d);,Efficiency,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Scrap Kettle,Self inflict [fire]1 burn|(Always offered as scrap),1,,Ember,,,GRAY,change_power,change_power,,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); var fireisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~fire~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_fire~) { fireisalt = true; } } } inflictself(FIRE|1); var inflictwhat = fireisalt ? ~alternate_fire~ : ~fire~; var dicelist = []; if(self.dicepool.length > 0) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist[0].animate(inflictwhat); } } e.animate(~flashandshake~); if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value -= 1; } } },,,,,,,
Scrap Kettle_upgraded,Roll a burning dice|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); inflictself(FIRE|1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Self inflict [fire]2 burns|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); var fireisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~fire~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_fire~) { fireisalt = true; } } } inflictself(FIRE|2); var inflictwhat = fireisalt ? ~alternate_fire~ : ~fire~; var dicelist = []; if(self.dicepool.length > 0) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist[0].animate(inflictwhat); } if(dicelist.length > 1) { dicelist[1].animate(inflictwhat|0.2); } } e.animate(~flashandshake~); if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value -= 2; } } },,,,,,,
Iced Latte,Self inflict [ice]1 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,change_power,change_power,ice,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); inflictself(ICE|1); var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { stat.value -= 1; } } },,,,,,,
Iced Latte_upgraded,Roll an extra frozen dice|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); givedice(); inflictself(ICE); self.dicepool[self.dicepool.length - 1].animate(~ice~|0.25); if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { stat.value -= 1; } } },,,,,,,
Iced Latte_downgraded,Self inflict [ice]2 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,e.animate(~flashandshake~); inflictself(ICE|2); var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } if(dicelist.length > 1) { dicelist[1].animate(~ice~|0.2); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { stat.value -= 2; } } },,,,,,,
Bear Potion,Transform into a bear[;]|recover [heal]12 health,2,attackself(-12); beartransform(); self.usecpuinsteadofdice = false;,Time Stop,COUNTDOWN,8,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Bear Potion_downgraded,Transform into a bear,2,beartransform(); self.usecpuinsteadofdice = false;,Time Stop,COUNTDOWN,8,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Wail,Silence Enemy,2,inflict(~ncr_silence~); bonus(1000);,Dial Up Sounds,REQUIRE5,,PURPLE,change_requirements,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wail_upgraded,Silence Enemy,2,inflict(~ncr_silence~); bonus(1000);,Dial Up Sounds,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Squawk,Silence Enemy,2,inflict(~ncr_silence~); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Squawk_upgraded,Do [sword]2 damage|Silence Enemy,2,attack(2); inflict(~ncr_silence~); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Squawk_downgraded,Silence Enemy,2,inflict(~ncr_silence~); bonus(1000);,Dial Up Sounds,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Storm_upgraded,Do [shock]<d6> damage[;]|Shock [shock]6 and silence,1,attack(d| SHOCK); inflict(SHOCK | 6); inflict(~ncr_silence~);,Zap,REQUIRE6|FREE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Marmalade,Get a [dice]6 next turn,1,inflictself(~stash~+6|1); inflictself(~illuminate~);,Magic Six,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Finders Keepers,After the battle[;] keep|one piece of equipment|[]+6 to count until battle end,2,if(self.finderskeepers == null) { self.finderskeepers = 1; } else if(self.finderskeepers != 999) { self.finderskeepers++; } screenshake(); e.countdown += 6;,Time Stop,COUNTDOWN,12,GRAY,,,,,0,YES,NO,cannotsteal,,e.countdown = 12;,e.countdown = 12;,,,,,,,,,
Melody,Inflict [weaken]1 weaken,1,inflict(WEAKEN| 1);,,NORMAL,,ORANGE,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Melody_upgraded,Inflict [weaken]2 weaken,1,inflict(WEAKEN| 2);,,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Wooden Stake?,Do [sword]30 damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(30); sfxdamage(target|30); } else self.textparticle(~No effect!~);,Heat Ray,COUNTDOWN,40,RED,halfcountdown,noeffect,,none,0,NO,NO,excludefromrandomlists|alternateversion,1,,,,,,,,,,,
