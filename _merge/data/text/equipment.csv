Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Category,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Parallel Universe,Special?,Error Immune,Show Gold,Appears For Parts,Hide Reuseable,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury
Inventor Gadgets,(special),2,,,,,ITEM,GRAY,,,,none,0,NO,NO,NO,YES,NO,NO,NO,NO,,self.setvar(~underwhelm~|5); self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0);,/*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~); self.setvar(~giveblades~|self.getvar(~giveblades~) - 1); }*/ self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0);,/*while(self.getvar(~giveblades~) > 0) { giveequipment(~Everblade~|true|false); self.setvar(~giveblades~|self.getvar(~giveblades~) - 1);  } while(self.getvar(~givebladesplus~) > 0) { giveequipment(~Everblade+~|true|false); self.setvar(~givebladesplus~|self.getvar(~givebladesplus~) - 1);  }*/ self.setvar(~phillip~|false); self.setvar(~grolluses~|3); self.setvar(~smashuses~|3); for(myskill in self.getskillcard().skills) { if(myskill.name == ~Gadget Roll~) { myskill.description = ~Reroll a dice (uses: 3)~; } if(myskill.name == ~Mirror Smash~) { myskill.description = ~-3 [heart][][;] get dice (uses: 3)~; } } /* for(myskill in e.skills) { if(myskill.name == ~Emulator~) { self.setvar(~emulatorchange~|e.skills.indexOf(myskill)); } } */ if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.script.split(~Gadget.reactivate(self| ALL);~).length > 1) { eq.script = eq.script.split(~Gadget.reactivate(self| ALL);~).join(~Gadget.reactivate(self|ALL); for(myskill in self.getskillcard().skills) { if(myskill.name == \~Gadget Roll\~) { self.setvar(\~grolluses\~|self.getvar(\~grolluses\~) + 1); var a = \~\~ + self.getvar(\~grolluses\~); trace(a); var b = \~\~ + (self.getvar(\~grolluses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } if(myskill.name == \~Mirror Smash\~) { self.setvar(\~smashuses\~|self.getvar(\~smashuses\~) + 1); var a = \~\~ + self.getvar(\~smashuses\~); trace(a); var b = \~\~ + (self.getvar(\~smashuses\~) - 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); if(myskill.description.split(\~-4 [\~).length > 1) { myskill.description = myskill.description.split(\~-4 [\~).join(\~-3 [\~); } } }~); } } } self.setvar(~invgadgets_eqsused~|0); self.setvar(~invgadgets_eqsused_display~|0);,,if(self.hasstatus(~ncr_lessfluff~)) { removestatusself(~ncr_lessfluff~); } self.setvar(~invgadgets_eqsused~|self.getvar(~invgadgets_eqsused~) + 1); if(self.getvar(~invgadgets_eqsused~) % 2 == 0) { self.setvar(~invgadgets_eqsused_display~|self.getvar(~invgadgets_eqsused_display~) + 1); },,,,,
Buster Sword,Do [sword]<d6> damage[;]|immune to errors,1,attack(d);,Plasma Gun,NORMAL,,WEAPON,GRAY,add2,complicate,,,0,NO,NO,NO,NO,YES,NO,NO,NO,,,,,,,,,,,
Ultima Weapon,Do [sword]<d6> damage[;]|double on jackpot,1,if (self.roll_jackpot > 0){ attack(d * 2); } else { attack(d); },Plasma Gun,NORMAL,,WEAPON,YELLOW,add2,complicate,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Starspear,Do [sword]6 damage[;]|add 2x random status,1,attack(6); var randstatus = rand([BLIND|CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Stardust,REQUIRE6,,WEAPON,PINK,change_power,doublerequirements,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Starspear_upgraded,Do [sword]<d6> damage[;]|add 2x random status,1,attack(d); var randstatus = rand([BLIND|CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Stardust,MIN5,,WEAPON,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Seize,Lock [lock]1 dice,2,inflict(LOCK| 1); bonus(1000);,Copyright Strike,EVEN,,MAGIC,PURPLE,simplify,complicate,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Fool's Fire,Inflict [vanish]Vanish,2,if(simulation) { bonus(400); } else { if(target.isplayer) { inflict(VANISH); } else { inflict(~ncr_vanishall~); inflict(~ncr_internalvanish~|999); if(getstatus(~ncr_vanishall~) > 0) { target.removestatus(~ncr_vanish~|ALL); } var dovanish = new elements.Skill(~Infvanishthing~); dovanish.execute(self|target); } },Mass Deception,COUNTDOWN,12,MAGIC,PINK,halfcountdown,change_function,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Fool's Frost,Inflict [vanish]Vanish,2,if(simulation) { bonus(400); } else { if(target.isplayer) { inflict(VANISH); } else { inflict(~ncr_vanishall~); inflict(~ncr_internalvanish~|999); if(getstatus(~ncr_vanishall~) > 0) { target.removestatus(~ncr_vanish~|ALL); } var dovanish = new elements.Skill(~Infvanishthing~); dovanish.execute(self|target); } },Mass Deception,COUNTDOWN,12,MAGIC,PINK,halfcountdown,change_function,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Fuse,Absorbs an error when|playing You Choose[;] You Lose,1,,Time Stop,,,ITEM,GRAY,,,,,0,YES,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Mechanical Arm,Do [sword]<dicerolled> damage[;]|add [sword]1 each roll,1,attack(self.roll_totaldice + 1);,Lucky Shot,EVEN,,WEAPON,,simplify,complicate,,,0,NO,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Forcefield,Add [shield]<dicerolled> shield[;]|add [shield]1 each roll,2,inflictself(SHIELD| (self.roll_totaldice + 1));,Protection,ODD,,SHIELD,,simplify,complicate,,,0,YES,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Incoming!,Add a Juggling Ball to|your deck for this fight,2,addjestercard(~juggling ball~); self.changebattlevar(~jugglingballs~| 1);,Replicate,COUNTDOWN,5,WEAPON,RED,,,,,0,YES,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Delete,Permanently delete the|first card in your hand,2,var firstcard = Deck.getcard(0); if(firstcard != null) firstcard.delete();,Time Stop,COUNTDOWN,5,ITEM,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Forge,Permanently upgrade the|first card in your hand|[gray](once per battle),2,//to do: implement this lol,,COUNTDOWN,16,ITEM,YELLOW,halfcountdown,noeffect,,,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Spare Cycles,Do [sword]<leftovercpu> damage[;]| [sword]1 for each unused CPU point,1,attack(d);,Overload,COUNTDOWN,12,MAGIC,BRIGHTCYAN,halfcountdown,noeffect,,,0,NO,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Lunasa,Replace the spell in slot <slotdoubles>|with a random spell,1,Spellbook.changespellflash(d| rand(Spellbook.getspelllist()));,,DOUBLES|DOUBLES,,MAGIC,ORANGE,change_power,change_power,,,0,YES,NO,YES,YES,NO,NO,NO,NO,1,,,,,,,,,,
Lunasa_upgraded,Replace the spell in slot <d6>|with a random spell,1,Spellbook.changespellflash(d| rand(Spellbook.getspelllist()));,,NORMAL,,MAGIC,ORANGE,,,,,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Lunasa_downgraded,Replace the spell in slot 1|with a random spell,1,Spellbook.changespellflash(1| rand(Spellbook.getspelllist()));,,REQUIRE1|REQUIRE1,,MAGIC,ORANGE,,,,,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Memorise,Replace the spell in slot <slotdoubles>|with the unexpected spell,1,Spellbook.changespellflash(d|Spellbook.getunexpectedspell());,,DOUBLES|DOUBLES,,MAGIC,PINK,change_power,change_power,,,0,YES,NO,YES,YES,NO,NO,NO,NO,1,,,,,,,,,,
Memorise_upgraded,Replace the spell in slot <d6>|with the unexpected spell,1,Spellbook.changespellflash(d|Spellbook.getunexpectedspell());,,NORMAL,,MAGIC,PINK,,,,,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Memorise_downgraded,Replace the spell in slot 1|with the unexpected spell,1,Spellbook.changespellflash(1|Spellbook.getunexpectedspell());,,REQUIRE1|REQUIRE1,,MAGIC,PINK,,,,,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Spring Equinox,Place two copies of the|next spell you cast,1,inflictself(~doublecast~);,,ODD,,MAGIC,YELLOW,simplify,complicate,,,0,YES,NO,YES,YES,NO,NO,NO,NO,1,,,,,,,,,,
Harvest Scythe,Consume spell in slot <d6>|to do [sword]<quadruple> damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(4 * d); Spellbook.erase(d); },,NORMAL,,MAGIC,ORANGE,change_power,complicate,,,0,NO,NO,YES,YES,NO,NO,NO,NO,1,,,,,,,,,,
Harvest Scythe_upgraded,Consume spell in slot <d6>|to do [sword]<quintuple> damage,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { attack(5 * d); Spellbook.erase(d); },,NORMAL,,MAGIC,ORANGE,,,,,0,NO,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Uptick@1,Increase and reset all dice|[gray](Current uptick: 1),2,var uptick = 2; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE1,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Uptick@2,Increase and reset all dice|[gray](Current uptick: 2),2,var uptick = 3; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE2,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Uptick@3,Increase and reset all dice|[gray](Current uptick: 3),2,var uptick = 4; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE3,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Uptick@4,Increase and reset all dice|[gray](Current uptick: 4),2,var uptick = 5; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE4,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Uptick@5,Increase and reset all dice|[gray](Current uptick: 5),2,var uptick = 6; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE5,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Uptick@6,Reset uptick to 1|[gray](Current uptick: 6),2,var uptick = 1; self.replaceskillcard(~Uptick@~ + uptick); self.setvar(~uptick~|uptick); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(uptick| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,,REQUIRE6,,SKILLCARD,GRAY,,,,,-1,YES,NO,NO,YES,NO,NO,NO,YES,,,,,,,,,,,
Call for Backup Witch,Magic Trick|Discard current hand,2,//$e.preventdefault = true; Deck.discardhand();$,Regenerate,,,BACKUP,PURPLE,,change_power,,none,0,YES,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,,
Call for Backup Inventor,Inspiration|Copy next card,2,if(self.name != ~Jester~) { e.preventdefault = true; var eqlist = []; for(eq in self.equipment) { if(eq.skillcard == ~~ ) { eqlist.push(eq); } } if(self.stolencard) { eqlist.push(self.stolencard); } if(eqlist[eqlist.indexOf(e) + 1] != null) { giveequipment(eqlist[eqlist.indexOf(e) + 1].name + eqlist[eqlist.indexOf(e) + 1].namemodifier); } else { self.textparticle(~No next card!~); } } //$if(self.name == ~Jester~) { e.preventdefault = true; Deck.copynextcard(self| e); }$,Time Stop,,,BACKUP,ORANGE,,change_power,,none,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Call for Backup Warrior,Warrior Smash|[sword]<var:bopcount> dmg[;] +1 per bop,2,attack(self.getvar(~bopcount~));,Lucky Shot,,,BACKUP,BRIGHTCYAN,,change_power,,none,0,NO,NO,NO,YES,NO,NO,NO,NO,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BACKUP,BRIGHTCYAN,,,,none,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,,,,
Call for Backup Witch?,Multicard!|Add an extra card to|your hand (this turn),2,//$e.preventdefault - true; Deck.sethandsize(4); Deck.lookahead = 0;$,,,,BACKUP,PURPLE,,,,none,0,YES,NO,YES,YES,NO,NO,NO,NO,,,,,,,,Deck.sethandsize(3); Deck.lookahead = 3;,,,
Call for Backup Inventor?,Random Access|Copy a random item|from your deck,2,if(self.name != ~Jester~) { var eqlist = []; for(eq in self.equipment) { if(eq.skillcard == ~~ && eq != e ) { eqlist.push(eq); } } if(self.stolencard) { eqlist.push(self.stolencard); } if(eqlist.length > 0) { giveequipment(rand(eqlist).name + rand(eqlist).namemodifier); } else { self.textparticle(~No effect!~); } } //$if(self.name == ~Jester~) { replacemewith(rand(Deck.getcardlist(~all~))| -1); } $,Emulator,,,BACKUP,ORANGE,,,,none,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Spatulasword,Do [sword]<d6> damage[;] and|flip the dice upside down,2,attack(d); givedice(7 - d);,Megaflip,NORMAL,,ITEM,RED,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Spatulasword_upgraded,Flip the dice upside down[;]|and do [sword]<d6> damage,2,attack(7 - d); givedice(7 - d);,Megaflip,NORMAL,,ITEM,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Spatulasword_downgraded,Flip a dice upside down,2,givedice(7 - d);,Megaflip,NORMAL,,ITEM,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Bear Hug,Do [sword]<double> damage[;]|lose a dice|[80%]''hug it out''[],2,attack(d * 2); self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,Plexiglass,NORMAL,,WEAPON,YELLOW,add1,complicate,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Action!,Keep a <d6> for next turn,1,inflictself(~stash~+d|1); inflictself(~illuminate~);,Magic Dice,NORMAL,,FINAL,,change_power,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Action!_upgraded,Keep two <d6>s for next turn,1,if(actualdice[0].basevalue == actualdice[1].basevalue) { inflictself(~stash~+actualdice[0].basevalue|2); inflictself(~illuminate~); } else { inflictself(~stash~+actualdice[0].basevalue|1); inflictself(~stash~+actualdice[1].basevalue|1); inflictself(~illuminate~); },Magic Dice,NORMAL|NORMAL,,FINAL,,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Bow Wow Wow,Make unavailable cards|available[;] return dice,2,if(self.name == ~Jester~) { var cardlist = Deck.getcards(~all~); for(c in cardlist){ if(!c.equipment.availablethisturn) { c.equipment.availablethisturn = true; c.equipment.animate(~flash~); } } givedice(d); } else { for(eq in self.equipment) { if(!eq.availablethisturn && eq.show) { eq.availablethisturn = true; eq.animate(~flash~); } } givedice(d); },Sustainability,EVEN,,MAGIC,PINK,simplify,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Table Slam,Reroll all unused dice[;]|and return this dice,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice(d);,Reroll,ODD,,MAGIC,PURPLE,simplify,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Melody,Inflict [weaken]1 weaken,2,inflict(WEAKEN| 1);,Burrower,NORMAL,,SHIELD,ORANGE,change_power,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Melody_upgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN| 2);,Burrower,NORMAL,,SHIELD,ORANGE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Chorus,Roll a dice for every|[weaken]1 weaken on enemy,1,var numweaken = getstatus(WEAKEN); if(numweaken > 0) { var returndice = []; for(i in 0 ... numweaken) { returndice.push(rand([1|2|3|4|5|6])); } givedice(returndice); },Burrower,MAX3,,MAGIC,ORANGE,simplify,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Fortify,Increase [shield] shield|by 50 percent,1,inflictself(SHIELD| getstatusself(SHIELD) * 0.5);,Barricade,COUNTDOWN,6,WEAPON,ORANGE,change_power,change_power,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Fortify_upgraded,Double [shield] shield,1,inflictself(SHIELD| getstatusself(SHIELD));,Barricade,COUNTDOWN,6,WEAPON,ORANGE,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Fortify_downgraded,Increase [shield] shield|by 25 percent,1,inflictself(SHIELD| getstatusself(SHIELD) * 0.25);,Barricade,COUNTDOWN,6,WEAPON,ORANGE,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Front Line,Lose [heart]3 health[;] gain|[shield]3 shield[;] return the dice,2,pierceattackself(3); inflictself(SHIELD| 3); givedice(d);,Hustle,NORMAL,,SHIELD,ORANGE,change_power,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Front Line_upgraded,Lose [heart]6 health[;] gain|[shield]6 shield[;] return the dice,2,pierceattackself(6); inflictself(SHIELD| 6); givedice(d);,Hustle,NORMAL,,SHIELD,ORANGE,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Princess Guard,Do [sword]<d6> damage|25% chance to add [shield]<d6>,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d); ,Safeguard,MAX4,,WEAPON,ORANGE,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Princess Guard_upgraded,Do [sword]<d6> damage|75% chance to add [shield]<d6>,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); if(chance(odds)) { self.textparticle(~Success!~); inflictself(SHIELD| d); sfx(~_shield~|~~|0.2); } sfxdamage(target|d);,Safeguard,MAX4,,WEAPON,ORANGE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Princess Guard_downgraded,Do [sword]<d6> damage,1,attack(d);,Safeguard,MAX4,,WEAPON,ORANGE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Venus Gospel,Do [weaken]<d6> damage|25% chance +[weaken]2 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 2); } attack(d| WEAKEN);,Scream,MAX5,,WEAPON,ORANGE,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Venus Gospel_upgraded,Do [weaken]<d6> damage|25% chance +[weaken]3 weaken,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); inflict(WEAKEN| 3); } attack(d| WEAKEN);,Scream,MAX5,,WEAPON,ORANGE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Venus Gospel_downgraded,Do [weaken]<d6> damage,1,attack(d| WEAKEN);,Scream,MAX5,,WEAPON,ORANGE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Snapdragon,Do [sword]3 damage[;]|on 6[;] gain [mana]2 mana,1,attack(3); if(d == 6) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,NORMAL,,WEAPON,RED,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Snapdragon_upgraded,Do [sword]3 damage[;]|on even[;] gain [mana]2 mana,1,attack(3); if(d % 2 == 0) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,NORMAL,,WEAPON,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Snapdragon_downgraded,Do [sword]3 damage[;]|on 3[;] gain [mana]2 mana,1,attack(3); if(d == 3) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~); } else { sfxdamage(target|3); },Glisten,MAX3,,WEAPON,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,Random Roll,NORMAL,,MAGIC,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,Random Roll,NORMAL,,MAGIC,BRIGHTCYAN,,,,,2,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Fruit Bowl_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,MAGIC,BRIGHTCYAN,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Enchanted Shield,Add [shield]<d6> shield|(Cost [mana]2[]: +[shield]<d6> shield),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); inflictself(SHIELD| d * 2); } else { inflictself(SHIELD| d); } ,Protection,MAX3,,MAGIC,ORANGE,increaserange,decreaserange,,,0,YES,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); attack(10); } else { attack(5); } ,Blowtorch,EVEN,,MAGIC,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Winds of Winter,Do [sword]1 damage for each|[mana]1 mana you have,1,if(getstatusself(MANA) > 0) {attack(getstatusself(MANA)); },Drunken Boxing,EVEN,,MAGIC,PURPLE,simplify,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Stew Pot,Do [sword]1 damage[;] reroll dice|(If [mana]>=6: return 5 or 6),1,if(getstatusself(MANA) >= 6) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,MAGIC,PURPLE,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Stew Pot_upgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=4: return 5 or 6),1,if(getstatusself(MANA) >= 4) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,MAGIC,PURPLE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Stew Pot_downgraded,Do [sword]1 damage[;] reroll dice|(If [mana]>=8: return 5 or 6),1,if(getstatusself(MANA) >= 8) { givedice(rand([5|6])); } else { givedice(); } attack(1);,Magic Six,NORMAL,,MAGIC,PURPLE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Bronze Cauldron,Do [sword]2[;] get an odd dice|[gray](Reuseable),1,attack(2); givedice(rand([1|3|5]));,Reroll,EVEN,,MAGIC,ORANGE,change_power,change_power,,,-1,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Bronze Cauldron_upgraded,Do [sword]3[;] get an odd dice|[gray](Reuseable),1,attack(3); givedice(rand([1|3|5]));,Reroll,EVEN,,MAGIC,ORANGE,,,,,-1,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Bronze Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Reroll,EVEN,,MAGIC,ORANGE,,,,,-1,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(10); } else { attack(5); } ,Glisten,EVEN,,MAGIC,PURPLE,change_power,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(14); } else { attack(7); } ,Glisten,EVEN,,MAGIC,PURPLE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Northern Lights,Get 2x<d6>s next turn|(If [mana]>=5: get 3 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d|3); inflictself(~illuminate~); } else { inflictself(~stash~+d|2); inflictself(~illuminate~); } ,Magic Dice,NORMAL,,MAGIC,PURPLE,change_power,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Northern Lights_upgraded,Get 4x<d6>s next turn|(If [mana]>=5: get 6 instead),1,if(getstatusself(MANA) >= 5) { inflictself(~stash~+d|6); inflictself(~illuminate~); } else { inflictself(~stash~+d|4); inflictself(~illuminate~); } ,Magic Dice,DOUBLES|DOUBLES,,MAGIC,PURPLE,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Daffodil,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,Glisten,MIN4,,ITEM,YELLOW,change_power,decreaserange,,,0,YES,NO,YES,NO,NO,NO,NO,NO,1,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,
Daffodil_upgraded,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,Glisten,MIN2,,ITEM,YELLOW,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,
Winter Solstice,Do [sword]<d6> damage|(If [mana]>=12: triple damage),1,if(getstatusself(MANA) >= 12) { attack(d * 3); } else { attack(d); } ,Glisten,ODD|ODD,,MAGIC,PURPLE,simplify,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,2,,,,,,,,,,
Gladioli,Do [sword]<d6> damage[;]|gain [mana]2 mana on 2 or less,1,attack(d); if(d <= 2) { inflictself(MANA|2); },Glisten,NORMAL,,WEAPON,RED,change_power,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Gladioli_upgraded,Do [sword]<d6> damage[;]|gain [mana]2 mana on 4 or less,1,attack(d); if(d <= 4) { inflictself(MANA|2); },Glisten,NORMAL,,WEAPON,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Picnic Basket,Keep a <d6> for next turn,1,inflictself(~stash~+d|1); inflictself(~illuminate~);,Magic Dice,NORMAL,,ITEM,PINK,change_power,complicate,,,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Picnic Basket_upgraded,Keep two <d6>s for next turn,1,if(actualdice[0].basevalue == actualdice[1].basevalue) { inflictself(~stash~+actualdice[0].basevalue|2); inflictself(~illuminate~); } else { inflictself(~stash~+actualdice[0].basevalue|1); inflictself(~stash~+actualdice[1].basevalue|1); inflictself(~illuminate~); },Magic Dice,NORMAL|NORMAL,,ITEM,PINK,,,,,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Call for Backup Thief?,Black Market|Rent a powerful item|Costs [gold]1[;] you have [gold]<gold>,2,//$if(self.gold > 0){ self.gold--; replacemewith(rand([~Dark Shadow~|~Bear Maul~|~Two Handed Sword~|~Tower Shield~|~Earthquake~|~Very Good Sword~|~Counterfeit~|~Spatulasword~|~Quarterstaff~])| -1); } else { self.textparticle(~Can't afford!~); }$,Harvest,,,BACKUP,GREEN,,,,none,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Call for Backup Robot?,Power Surge|Add +1 to all dice|less than six,2,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue < 6){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,Double Whammy,,,BACKUP,GRAY,,,,none,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Hijinx,Reduce all Jinx|countdowns by [jinx]1,2,boostjinxcountdowns(self| 1); boostjinxcountdowns(target| 1);,Down Low,EVEN,,ITEM,PINK,change_power,complicate,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Hijinx_upgraded,Reduce all Jinx|countdowns by [jinx]2,2,boostjinxcountdowns(self| 2); boostjinxcountdowns(target| 2);,Down Low,EVEN,,ITEM,PINK,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Slapsies,In [jinx]<d6> turns[;]|do [sword]<triple> damage,2,jinx(~Slapsies~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 3));  sfx(~_thinghappens~);,Drunken Boxing,MAX4,,ITEM,PINK,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Slapsies_upgraded,In [jinx]<d6> turns[;]|do [sword]<quadruple> damage,2,jinx(~Slapsies+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 4)); sfx(~_thinghappens~);,Drunken Boxing,MAX4,,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Slapsies_downgraded,In [jinx]<d6> turns[;]|do [sword]<d6> damage,2,jinx(~Slapsies-~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|d); sfx(~_thinghappens~);,Drunken Boxing,MAX4,,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Mercy,In [jinx]6 turns[;]|do [fire]20 damage,2,jinx(~Mercy~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|6|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,ITEM,PINK,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Mercy_upgraded,In [jinx]5 turns[;]|do [fire]20 damage,2,jinx(~Mercy+~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|5|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Mercy_downgraded,In [jinx]7 turns[;]|do [fire]20 damage,2,jinx(~Mercy-~|~take [fire]%VAR% damage~|~Take [fire]%VAR% damage~|~attack(%VAR%| FIRE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|7|20); sfx(~_thinghappens~);,Blowtorch,COUNTDOWN,5,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Concentration,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,Health Pack,MAX4,,ITEM,PINK,change_power,change_power,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Concentration_upgraded,In [jinx]<d6> turns[;]|recover <triple> health,2,jinx(~Concentration+~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 3)); sfx(~_thinghappens~);,Health Pack,MAX4,,ITEM,PINK,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Concentration_downgraded,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concentration-~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,Health Pack,REQUIRE4,,ITEM,PINK,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Lojinx,Do [sword]2 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 2); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,ITEM,PINK,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Lojinx_upgraded,Do [sword]3 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 3); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Lojinx_downgraded,Do [sword]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount); givedice(d); sfxdamage(target|jinxcount * 2); },Down Low,NORMAL,,ITEM,PINK,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Sour Candy,Heal [heal]2. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(2); sfxdamage(target|2); } else if(self.maxhp - self.hp == 1) { attack(1); attackself(-1); sfxdamage(target|1); } else {  attackself(-2); sfx(~_heal~); },Rejuvenate,NORMAL,,ITEM,GREEN,change_power,change_power,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Sour Candy_upgraded,Heal [heal]3. If above max hp[;]|deal excess as damage,1,if(self.maxhp - self.hp == 0) { attack(3); sfxdamage(target|3); } else if(self.maxhp - self.hp == 1) { attack(2); attackself(-1); sfxdamage(target|2); } else if(self.maxhp - self.hp == 2) { attack(1); attackself(-2); sfxdamage(target|1); } else {  attackself(-3); sfx(~_heal~); },Rejuvenate,NORMAL,,ITEM,GREEN,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Sour Candy_downgraded,Heal [heal]1 health,1,attackself(-1); sfx(~_heal~); ,Rejuvenate,NORMAL,,ITEM,GREEN,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Blood Let,Lose [heart]2 hp[;] then heal [heart]1,1,pierceattackself(2); attackself(-1);,Hustle,ODD,,ITEM,RED,change_power,change_power,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Blood Let_upgraded,Lose [heart]4 hp[;] then heal [heart]2,1,pierceattackself(4); attackself(-2);,Hustle,ODD,,ITEM,RED,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Blood Let_downgraded,Lose [heart]2 hp|[gray](Reuseable),1,pierceattackself(2);,Hustle,ODD,,ITEM,RED,,,,,0,YES,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Mirror Shard,Do [sword]9 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(9); self.extradice++; },Curved Mirror,REQUIRE6|REQUIRE6,,ITEM,PURPLE,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,,,,,,,
Mirror Shard_upgraded,Do [sword]12 damage[;]|+1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(12); self.extradice++; },Curved Mirror,REQUIRE6|REQUIRE6,,ITEM,PURPLE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Mirror Shard_downgraded,Do [sword]9 damage,2,attack(9);,Curved Mirror,REQUIRE6|REQUIRE6,,ITEM,PURPLE,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Kapow,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +1 for|each kapow used this turn,2,attack(self.getvar(~kapowcount~) + 1); self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,MAGIC,YELLOW,change_power,change_power,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,
Kapow_upgraded,Do [sword]<var_tempkapowkludge:kapowcount> damage[;] +2 for|each kapow used this turn,2,attack((self.getvar(~kapowcount~) + 1) * 2); self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,MAGIC,YELLOW,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,
Kapow_downgraded,Increase Kapow counter,2,self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 1);,Pea Gun,NORMAL,,MAGIC,YELLOW,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,self.setvar(~kapowcount~| 0);,,,,,,,
Big Moment,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Rod,COUNTDOWN,7,FINAL,,change_power,change_power,,,2,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Big Moment_upgraded,Do [sword]7 damage|[gray](Reuseable),2,attack(7);,Rod,COUNTDOWN,7,FINAL,,,,,,4,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Big Moment_downgraded,Do [sword]7 damage,2,attack(7);,Rod,COUNTDOWN,7,FINAL,,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,,,,,,,
Memory Leak,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,,NORMAL,,WEAPON,,change_power,complicate,,,0,NO,NO,YES,YES,NO,NO,NO,NO,,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~]); e.setvar(~rollcheck~| 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,
Memory Leak_upgraded,Do [sword]<double> damage|(Slots shrink on each roll),1,attack(d * 2);,,NORMAL|FREE1,,WEAPON,,,,,,0,NO,NO,YES,YES,NO,NO,NO,NO,,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0);,e.changeslots([~NORMAL~|~FREE1~]); e.setvar(~rollcheck~| 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~ | e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var currentslots = e.getslots(); if(currentslots.length > 1){ if(currentslots[1] == ~FREE1~){ e.changeslots([~NORMAL~]); }else if(currentslots[1] == ~FREE2~){ e.changeslots([~NORMAL~|~FREE1~]); }else if(currentslots[1] == ~FREE3~){ e.changeslots([~NORMAL~|~FREE2~]); }else if(currentslots[1] == ~FREE4~){ e.changeslots([~NORMAL~|~FREE3~]); }else if(currentslots[1] == ~FREE5~){ e.changeslots([~NORMAL~|~FREE4~]); }else if(currentslots[1] == ~FREE6~){ e.changeslots([~NORMAL~|~FREE5~]); } } else { if(currentslots[0] == ~NORMAL~){ e.changeslots([~MAX5~]); }else if(currentslots[0] == ~MAX5~){ e.changeslots([~MAX4~]); }else if(currentslots[0] == ~MAX4~){ e.changeslots([~MAX3~]); }else if(currentslots[0] == ~MAX3~){ e.changeslots([~MAX2~]); }else if(currentslots[0] == ~MAX2~){ e.changeslots([~REQUIRE1~]); } } },,,,
Flaming Sword,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d|FIRE); inflict(FIRE| 2);,Blowtorch,MAX5|MAX5,,WEAPON,RED,change_power,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,e.animate(~flashandshake~); inflictself(FIRE| 1); sfx(~_fire~); if(self.name != ~Robot~) { var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } },,,,,,
Flaming Sword_upgraded,Do [fire]<d6> damage[;] +[fire]2 burn|([fire]Burn[] yourself each turn),1,attack(d|FIRE); inflict(FIRE| 2);,Blowtorch,NORMAL|NORMAL,,WEAPON,RED,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,e.animate(~flashandshake~); inflictself(FIRE| 1); sfx(~_fire~); if(self.name != ~Robot~) { var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } },,,,,,
Frozen Sword,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d|ICE); inflict(ICE| 2);,Flash Freeze,MAX5|MAX5,,WEAPON,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,YES,NO,NO,NO,NO,NO,1,,,,e.animate(~flashandshake~); inflictself(ICE| 1); sfx(~_ice~); if(self.name != ~Robot~) { var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~ice~ && stat.value != oldfreeze) { inflictwhat = stat.type; } if(stat.type == ~alternate_ice~ && stat.value != oldaltfreeze) { inflictwhat = stat.type; } } if(inflictwhat == ~ice~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } } if(inflictwhat == ~alternate_ice~) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { mydice.animate(~alternate_ice~); } } } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } },,,,,,
Frozen Sword_upgraded,Do [ice]<d6> dmg[;] +[ice]2 freeze|([ice]Freeze[] yourself at the|start of each turn),1,attack(d|ICE); inflict(ICE| 2);,Flash Freeze,NORMAL|NORMAL,,WEAPON,BRIGHTCYAN,,,,,0,NO,NO,YES,NO,NO,NO,NO,NO,,,,,e.animate(~flashandshake~); inflictself(ICE| 1); sfx(~_ice~); if(self.name != ~Robot~) { var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~ice~ && stat.value != oldfreeze) { inflictwhat = stat.type; } if(stat.type == ~alternate_ice~ && stat.value != oldaltfreeze) { inflictwhat = stat.type; } } if(inflictwhat == ~ice~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } } if(inflictwhat == ~alternate_ice~) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { mydice.animate(~alternate_ice~); } } } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } },,,,,,
Slime Ball,Add [poison]2 poison,1,inflict(POISON| 2);,Poison Arrow,EVEN,,WEAPON,PURPLE,change_power,complicate,,,0,NO,NO,NO,NO,NO,NO,NO,NO,1,,,,,,,,,,
Slime Ball_upgraded,Add [poison]3 poison,1,inflict(POISON| 3);,Poison Arrow,EVEN,,WEAPON,PURPLE,,,,,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
