Name,Description,Requirements,Script
Plexiglass,-1 dice for you and enemy,,if(self.dice + self.extradice == 1 # target.dice + target.extradice == 1) { self.textparticle(~Can't go lower!~); } else { self.extradice--; target.extradice--; sfx(~magic_gaindice~); }
Obfuscate,Inflict [blind]2 blind,,inflict(BLIND|2); sfx(~_blind~);
Science,Blind a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(BLIND| r); sfx(~_blind~); // you could probably do this without r by just putting the rand in place of it; but this is how the official items do it so what-ever
Neutron Star,Odd turns: [sword]3[;] even: [sword]6,,if(turn % 2 == 0) { attack(6); sfxdamage(target|6); } else { attack(3); sfxdamage(target|3); }
Conformity,Set a dice to your highest,,var dicelist = []; var max = 0; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice);  if (mydice.basevalue > max) { max = mydice.basevalue; } } } if(dicelist.length > 0 && max > 0) { var backupdicelist = dicelist.copy(); for(mydice in backupdicelist) { if(mydice.basevalue == max) { dicelist.remove(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(max| self.screenposition()); } else { shuffle(backupdicelist); backupdicelist[0].animatereroll(max|self.screenposition()); } } }
Healthy Eating,Gain 2 max hp (once),,self.maxhp +=2; attackself(-2); sfx(~_heal~); Gadget.changegadget(self| ~Healthy Eating~| ~Broken Gadget~); //kale salad used to be the only way of raising max hp; builds exploiting kale salad with hookshot and a breakable enemy (like paper knight) were called 'healthy eating' builds at least once
Electrify,Shock a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(SHOCK| r); sfx(~_shock~);
Underwhelm,Do [sword]<var:underwhelm> dmg[;] dmg -1,,if(!self.getvar(~underwhelm~) > 0) {self.setvar(~underwhelm~|5);} attack(self.getvar(~underwhelm~)); sfxdamage(target|self.getvar(~underwhelm~)); if(self.getvar(~underwhelm~) > 1) {self.setvar(~underwhelm~|self.getvar(~underwhelm~)-1);} // base value of underwhelm; 5; was _merged into inventor gadgets. also yes; i use semicolons instead of commas; do; not; mock me;;;;;;
Dice Bash,Do [sword] with any of your dice,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); }} if(dicelist.length > 0) { shuffle(dicelist); attack(dicelist[0]); sfxdamage(target|dicelist[0]); }
Phillips Head,[sword]3 dmg[;] [sword]6 if reactivated,,if (self.getvar(~phillip~) != true) { attack(3); self.setvar(~phillip~|true); } else { attack(6); } // _merge inventor gadgets shenanigans
Drunken Boxing,Do [sword]1-10 damage,,var r = rand([1|2|2|3|3|3|4|4|4|4|5|5|5|5|5|6|6|6|6|6|7|7|7|7|8|8|8|9|9|10]); attack(r); sfxdamage(target|r);
Rod,Cut enemy health by 1/6,,var p = (target.hp / 6); pierceattack(p); sfxdamage(target|p);
Perfectionism,Make dice parity match,,var availabledice = []; var evens = 0; var odds = 0; var oddparity = false; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()){ availabledice.push(mydice); trace(1); if (mydice.basevalue % 2 == 0) { evens++; } else { odds++; } } } if(availabledice.length > 0) { trace(2); if(evens > odds) { oddparity = true; } else { if(evens == odds) { oddparity = rand([false|true]); } } trace(3); if(oddparity == false) { sfx(~diceroll~); for(mydice in availabledice){ if(mydice.basevalue % 2 == 0) { mydice.animatereroll(mydice.basevalue - 1|self.screenposition()); } } } else { if(oddparity == true) { trace(4); sfx(~diceroll~); for(mydice in availabledice) { if(mydice.basevalue % 2 == 1) { mydice.animatereroll(mydice.basevalue + 1|self.screenposition()); } } } else { self.textparticle(~Already matched!~); } } } }
Reset Button,Clear all active statuses (once),,var exceptions = [~cannotseeenemyhealth~|~robotblinded~|~crystalinaremix~]; if(target.status.length > 0) { for(x in target.status) { if(exceptions.indexOf(x.type) == -1) { removestatus(x.type|ALL); } } } if(self.status.length > 0) { for(x in self.status) { if(exceptions.indexOf(x.type) == -1) { removestatusself(x.type|ALL); } } } sfx(~_cure~); /*frankly kind of surprised that part was as simple as it was*/ if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.shockedsetting != 0) { eq.shockedsetting = 0; eq.animate(~flashandshake~); } if(eq.namemodifier == ~-~) { eq.unweaken(); eq.animate(~flashandshake~); } } } if(self.dicepool.length > 0) { for(mydice in self.dicepool) { if(mydice.burn # mydice.alternateburn # mydice.blind # mydice.locked) { var flashanim = new elements.Animation(); flashanim.applytodice(mydice); mydice.animation.push(flashanim); flashanim.addcommand(~flash~|0|0.15); flashanim.addcommand(~shake~|20|0|20|0); } mydice.burn = false; mydice.alternateburn = false; mydice.blind = false; mydice.showoverlayimage = false; if(mydice.locked) { mydice.locked = false; mydice.canbedragged = true; mydice.dicealpha = 1; } } } Gadget.changegadget(self| ~Reset Button~| ~Broken Gadget~);
Scabbard (1/2),Get Sacrificial Blade (once),,giveequipment(~Sacrificial Blade@2~|true|false); Gadget.changegadget(self| ~Scabbard (1/2)~| ~Broken Gadget~);
Scabbard+ (1/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@2+~|true|false); Gadget.changegadget(self| ~Scabbard+ (1/4)~| ~Broken Gadget~);
Scabbard (2/2),Get Sacrificial Blade (once),,giveequipment(~Sacrificial Blade@1~|true|false); Gadget.changegadget(self| ~Scabbard (2/2)~| ~Broken Gadget~);
Scabbard+ (2/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@1+~|true|false); Gadget.changegadget(self| ~Scabbard+ (2/4)~| ~Broken Gadget~);
Scabbard+ (3/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@0+~|true|false); Gadget.changegadget(self| ~Scabbard+ (3/4)~| ~Broken Gadget~);
Scabbard+ (4/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@X+~|true|false); Gadget.changegadget(self| ~Scabbard+ (4/4)~| ~Broken Gadget~);
Deep Breath,Trash all dice[;] gain [heal]3 each,,for (mydice in self.dicepool){ if (mydice.available()){ mydice.removedice(self.screenposition()); attackself(-3); }} // actually an official item that was scrapped - see https://github.com/TerryCavanagh/diceydungeonsbeta/issues/264
Delude,Inflict [vanish]1 vanish,,if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~); inflict(~ncr_internalvanish~); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); } sfx(~_vanish~);
Strobe Light,Vanish a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~|r); inflict(~ncr_internalvanish~|r); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); } sfx(~_vanish~);
Hadoken,Do [vanish]3 damage,,attack(3|VANISH); sfx(~_vanish~);
Briar Bush,Gain [thorns]2 thorns,,inflictself(THORNS|2); sfx(~_thorns~);
Mass Deception,Inflict [vanish]Vanish ALL[],,inflict(~ncr_vanishall~); inflict(~ncr_internalvanish~|999); var dovanish = new elements.Skill(~Infvanishthing~); dovanish.execute(self|target); sfx(~_vanish~);
THE [200%]GASDGFET,[200%]THE [300%]SBETST [200%]GDAGET IN DICE DUNGENS,,attack(2); sfxdamage(target|999);
Light Switch,Copy a dice for next turn,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); }} if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); }
Install Evony,In [jinx]1[;] equipment uses raise CPU,,jinx(~Install Evony~|~each equipment use will raise CPU by 1~|~Each equipment use will raise CPU by 1~|~inflict(\~cpuvirus\~| 1); sfx(\~magic\~);~|self|self|1|0); sfx(~_thinghappens~);
impulse 101,In [jinx]1[;] increase Jackpot range,,jinx(~impulse 101~|~increase Jackpot range~|~Increase Jackpot range~|~target.roll_range += 1; sfx(\~useitem\~);~|self|self|1|0); sfx(~_thinghappens~);
Less Fluff,Scrap first equipment now,,var cardlist = []; for(eq in self.equipment){ if(eq.ready && eq != self.getskillcard()) { cardlist.push(eq); } } if(cardlist.length > 0) { Gadget.givegadget(self|cardlist[0].gadget|true); removeequipment(cardlist[0].name); sfx(~_cure~); cardlist.remove(cardlist[0]); self.getskillcard().animate(~flashandshake~); }
Proximity Mine,Reroll dice nearest to this,,var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110; var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } if(dicelist.length != 0) { var proxlist = []; for(mydice in dicelist) { proxlist.push(((mydice.x - proximx) * (mydice.x - proximx)) + ((mydice.y - proximy) * (mydice.y - proximy))); if(proxlist[proxlist.length - 1] < 0) { proxlist[proxlist.length - 1] = proxlist[proxlist.length - 1] * -1; } } var min = [0|999999999999999999999]; for(prox in proxlist) { trace(prox); trace(min[1]); trace(~---~); if(prox < min[1]) { min[1] = prox; min[0] = proxlist.indexOf(prox); } } sfx(~diceroll~); dicelist[min[0]].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()); } else { self.textparticle(~No dice!~); }
Turbo Boost,12 to a random count,,var poss = []; for(eq in self.equipment){if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq) } }  if(poss.length > 0){ var r = rand(poss); givedice(6); givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); r.assigndice(self.dicepool[self.dicepool.length - 2]); } //basically another ropedart copypaste. should that 2 be a 1 i dono
Vaporizer,Do [sword]5 damage,,attack(5); sfxdamage(target|5);
Parity Flip,Bump odds[;] nudge evens,,var c = 0; if(self.dicepool.length > 0) { sfx(~diceroll~); for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue % 2 == 0){ mydice.animatereroll((mydice.basevalue - 1)| self.screenposition()| c * 0.05); c++; } if (mydice.available() && mydice.basevalue % 2 == 1){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); c++; } } }
Razor Blade,Split all dice,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { for(mydice in dicelist) { mydice.removedice(self.screenposition()); givedice(split(mydice.basevalue)); } }
Emulator,Mimic a card's gadget,,var exceptionlist = [~Steal~|~Emulator~|~Broken Gadget~|~Mirror Smash~|~Gadget Roll~|~Scabbard (1/2)~|~Scabbard+ (1/4)~|~Scabbard (2/2)~|~Scabbard+ (2/4)~|~Scabbard+ (3/4)~|~Scabbard+ (4/4)~]; var gadgpool = []; for(eq in self.equipment) { if(eq.ready && eq.skillcard == ~~ && exceptionlist.indexOf(eq.gadget) == -1) { gadgpool.push(eq.gadget); } } shuffle(gadgpool); var emulategadget = new elements.Skill(gadgpool[0]); var j = emulategadget.script.split(~Gadget.changegadget(self| \~~ + emulategadget.name + ~\~~); if(j.length > 1) { emulategadget.script = j.join(~Gadget.changegadget(self| \~Emulator\~~); } emulategadget.execute(self|target); self.getskillcard().animation = []; self.getskillcard().animate(~particleblah~); self.getskillcard().animation[0].addcommand(~textparticle~[;] emulategadget.name + ~!~[;] 16777215);
Gadget Roll,Reroll a dice (uses: 3),,var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { trace(~hi~); shuffle(availdice); availdice[0].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()); sfx(~diceroll~); } if(self.getvar(~grolluses~) > 0) { self.setvar(~grolluses~|self.getvar(~grolluses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Gadget Roll~) { var a = ~~ + self.getvar(~grolluses~); trace(a); var b = ~~ + (self.getvar(~grolluses~) + 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } } if(self.getvar(~grolluses~) > 0) { Gadget.reactivate(self|~Gadget Roll~); }
Mirror Smash,-3 [heart][][;] get dice (uses: 3),,pierceattackself(3); sfx(~_heal~); givedice(); if(self.getvar(~smashuses~) > 0) { self.setvar(~smashuses~|self.getvar(~smashuses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Mirror Smash~) { var a = ~~ + self.getvar(~smashuses~); trace(a); var b = ~~ + (self.getvar(~smashuses~) + 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); if(myskill.description.split(~-2 [~).length > 1) { myskill.description = myskill.description.split(~-2 [~).join(~-3 [~); } } } if(self.getvar(~smashuses~) > 0) { Gadget.reactivate(self|~Mirror Smash~); }
Hustle,Boost limit charge by 2,,self.limitvalue += 2; if(self.limitvalue > self.limitmax) self.limitvalue = self.limitmax; sfx(~_cure~); //jackeea later told me he has a gadget exactly like this but boosts 5 instead of 2. 5 is an awful lot though.. also i'm ncrecc and this is my mod so i get to do whatever i want
Limit Broke old,Revert to initial limit break,,if(self.getvar(~myoldlimit~) != 0) { self.changelimitbreak(self.getvar(~myoldlimit~)); } else { target.textparticle(~yell at ncr if you see this~); } //scrapped because it only made sense with cybernetics and this is also used for loud bird? rule
Limit Roll,Reroll 3 dice,,var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); for(i in 0...3) { if(availdice.length > i) { availdice[i].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition());  } } }
Limit Mirror,-9 [heart][;] roll 3 new dice,,pierceattackself(9); sfx(~_heal~); givedice(rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6]));
Copyright Strike,[lock]Counter with nearest dice,,var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110; var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } if(dicelist.length != 0) { var proxlist = []; for(mydice in dicelist) { proxlist.push(((mydice.x - proximx) * (mydice.x - proximx)) + ((mydice.y - proximy) * (mydice.y - proximy))); if(proxlist[proxlist.length - 1] < 0) { proxlist[proxlist.length - 1] = proxlist[proxlist.length - 1] * -1; } } var min = [0|999999999999999999999]; for(prox in proxlist) { trace(prox); trace(min[1]); trace(~---~); if(prox < min[1]) { min[1] = prox; min[0] = proxlist.indexOf(prox); } } inflict(~counter_~ + dicelist[min[0]].basevalue); sfx(~_magic~); } else { self.textparticle(~No dice!~); }
Around the Bend,Roll a full house,,var randlist = [1|2|3|4|5|6]; var dicelist = []; shuffle(randlist); dicelist.push(randlist[0]); dicelist.push(randlist[1]); var giveorder = [0|0|0|1|1]; shuffle(giveorder); givedice([dicelist[giveorder[0]]|dicelist[giveorder[1]]|dicelist[giveorder[2]]|dicelist[giveorder[3]]|dicelist[giveorder[4]]]); //this sucks
Curved Mirror,Get random amt. of dice,,var r = rand([1|2|2|3|3|3|4|4|5]); dicelist = []; for(i in 0...r) { dicelist.push(rand([1|2|3|4|5|6])); } givedice(dicelist);
Rejuvenate,Heal a random amount,,var r = rand([1|2|2|3|3|3|4|4|5]); attackself(-r); sfx(~_heal~);
Vanishthing,Internal[;] you shouldnt be seeing this. btw MATZ YOU ARE A LEGEND,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(target.getskillcard() != null) { if(target.getskillcard().skills.length > 0) { for(myskill in target.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(target.dicepool.length > 0) { for (mydice in target.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatus(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatus(~ncr_internalvanish~)); if(getstatus(~ncr_internalvanish~) > 0) { removestatus(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (target.scriptonstartturn.split(vanishshitA).length <= 1) { target.scriptonstartturn = vanishshitA + target.scriptonstartturn; } if(target.equipment.length > 0) { for(eq in target.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } while (getstatus(~ncr_vanish~) < getstatus(~ncr_internalvanish~)) { removestatus(~ncr_internalvanish~); } // that bit at the end is an edgecase with alt reduce
Infvanishthing,Still internal why are you looking at this,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(target.getskillcard() != null) { if(target.getskillcard().skills.length > 0) { for(myskill in target.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(target.dicepool.length > 0) { for (mydice in target.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatus(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatus(~ncr_internalvanish~)); if(getstatus(~ncr_internalvanish~) > 0) { removestatus(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (target.scriptonstartturn.split(vanishshitA).length <= 1) { target.scriptonstartturn = vanishshitA + target.scriptonstartturn; } if(target.equipment.length > 0) { for(eq in target.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } if (getstatus(~ncr_vanishall~) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { removestatus(~ncr_internalvanish~|ALL); } // that bit at the end is an edgecase with alt reduce
Vanishselfthing,Also internal! good job,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatusself(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatusself(~ncr_internalvanish~)); if(getstatusself(~ncr_internalvanish~) > 0) { removestatusself(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (self.scriptonstartturn.split(vanishshitA).length <= 1) { self.scriptonstartturn = vanishshitA + self.scriptonstartturn; } if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } while (getstatusself(~ncr_vanish~) < getstatusself(~ncr_internalvanish~)) { removestatusself(~ncr_internalvanish~); } /*<-- edgecase with alt reduce*/
Infvanishselfthing,Can you guess what this is? its internal!!!,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatusself(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatusself(~ncr_internalvanish~)); if(getstatusself(~ncr_internalvanish~) > 0) { removestatusself(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (self.scriptonstartturn.split(vanishshitA).length <= 1) { self.scriptonstartturn = vanishshitA + self.scriptonstartturn; } if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } if (getstatusself(~ncr_vanishall~) < 1) { removestatusself(~ncr_internalvanish~|ALL); } // that bit at the end is an edgecase with alt reduce
Double Whammy,Reroll 2 lowest dice,,for(i in 1...3) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && !mydice.intween()) { dicelist.push(mydice); } } if(dicelist.length < 1) { break; } sfx(~diceroll~); dicelist.sort(function(a|b) return a.basevalue - b.basevalue); for(mydice in dicelist) { if(mydice.basevalue > dicelist[0].basevalue) { dicelist.remove(mydice); } } var dicelistcopy = dicelist.copy(); for(mydice in dicelist) { if(mydice.burn) { dicelist.remove(mydice); } } for(mydice in dicelist) { if(mydice.blind) { dicelist.remove(mydice); } } if(dicelist.length > 0) {  dicelist[0].animatereroll(rand([1|2|3|4|5|6])|self.screenposition()); } else { dicelist = dicelistcopy.copy(); for(mydice in dicelist) { if(mydice.blind) { dicelist.remove(mydice); } } if(dicelist.length > 0) {  dicelist[0].animatereroll(rand([1|2|3|4|5|6])|self.screenposition()); } else { dicelist = dicelistcopy.copy(); for(mydice in dicelist) { if(mydice.burn) { dicelist.remove(mydice); } } if(dicelist.length > 0) {  dicelist[0].animatereroll(rand([1|2|3|4|5|6])|self.screenposition()); } else { dicelist = dicelistcopy.copy(); if(dicelist.length > 0) { dicelist[0].animatereroll(rand([1|2|3|4|5|6])|self.screenposition()); } } } } }
Safeguard,Shield a random amount,,var r = rand([1|2|2|3|3|3|4|4|5]); inflictself(SHIELD|r); sfx(~_shield~);
Sustainability,Gain [recycle]3 (once),,inflictself(REEQUIP|3); Gadget.changegadget(self| ~Sustainability~| ~Broken Gadget~);
Limit Broke,No effect,,donothing();
Glisten,Gain [mana]2 mana,,inflictself(MANA); sfx(~_mana~);
Down Low,Boost jinxes by 1 turn,,boostjinxcountdowns(self| 1); boostjinxcountdowns(target| 1);
Health Pack,Heal [heal]16 (once),,attackself(-16); sfx(~_heal~); Gadget.changegadget(self| ~Health Pack~| ~Broken Gadget~);
ncr Limit Enforcer,Internal limit break correction,,trace(target); var standardscripttoself = ~trace(self.getvar(\~myenforcedlimit\~)); self.changelimitbreak(self.getvar(\~myenforcedlimit\~)); var limbroke = new elements.Skill(\~Limit Broke\~); self.alternatelimitbreak = limbroke; var superenforce = new elements.Skill(\~ncr Cyber Limit Enforcer self\~); superenforce.execute(self|target);~; var standardscripttotarget = ~trace(target.getvar(\~myenforcedlimit\~)); target.changelimitbreak(target.getvar(\~myenforcedlimit\~)); var limbroke = new elements.Skill(\~Limit Broke\~); target.alternatelimitbreak = limbroke; var superenforce = new elements.Skill(\~ncr Cyber Limit Enforcer target\~); superenforce.execute(self|target);~; var ascheckscripttoself = ~trace(self.getvar(\~myenforcedlimit\~)); if(getstatusself(\~alternate_silence\~) == 0) { self.changelimitbreak(self.getvar(\~myenforcedlimit\~)); } var limbroke = new elements.Skill(\~Limit Broke\~); self.alternatelimitbreak = limbroke; var superenforce = new elements.Skill(\~ncr Cyber Limit Enforcer self\~); superenforce.execute(self|target);~; var ascheckscripttotarget = ~trace(target.getvar(\~myenforcedlimit\~)); if(getstatus(\~alternate_silence\~) == 0) { target.changelimitbreak(target.getvar(\~myenforcedlimit\~)); } var limbroke = new elements.Skill(\~Limit Broke\~); target.alternatelimitbreak = limbroke; var superenforce = new elements.Skill(\~ncr Cyber Limit Enforcer target\~); superenforce.execute(self|target);~; if(target != null) { trace(~blahhh~); if(self.isplayer) { self.scriptbeforestartturn = ascheckscripttoself + self.scriptbeforestartturn; self.scriptaftercombat = standardscripttoself + self.scriptaftercombat; self.scriptbeforecombat = ~target.scriptbeforestartturn = \~trace(target.getvar(\\\~myenforcedlimit\\\~)); target.changelimitbreak(target.getvar(\\\~myenforcedlimit\\\~)); var limbroke = new elements.Skill(\\\~Limit Broke\\\~); target.alternatelimitbreak = limbroke;\~ + target.scriptbeforestartturn;~ + standardscripttoself + self.scriptbeforecombat; target.scriptbeforestartturn = standardscripttotarget + target.scriptbeforestartturn; } else { target.scriptbeforestartturn = ascheckscripttoself + target.scriptbeforestartturn; target.scriptaftercombat = standardscripttoself + target.scriptaftercombat; target.scriptbeforecombat = standardscripttoself + target.scriptbeforecombat; self.scriptbeforestartturn = standardscripttotarget + self.scriptbeforestartturn; } } else { trace(~bassaaahhh~);  self.scriptbeforestartturn = ascheckscripttoself + self.scriptbeforestartturn; self.scriptaftercombat = standardscripttoself + self.scriptaftercombat; self.scriptbeforecombat = ~target.scriptbeforestartturn = \~trace(target.getvar(\\\~myenforcedlimit\\\~)); target.changelimitbreak(target.getvar(\\\~myenforcedlimit\\\~)); var limbroke = new elements.Skill(\\\~Limit Broke\\\~); target.alternatelimitbreak = limbroke;\~ + target.scriptbeforestartturn;~ + standardscripttoself + self.scriptbeforecombat; }
ncr Cyber Limit Enforcer self,Further internal limit break correction,,var j = self.limitbreak.script.split(~Gadget.changegadget(self| \~~ + self.limitbreak.name + ~\~| \~Broken Gadget~); if(j.length > 1) { self.limitbreak.script = j.join(~self.changelimitbreak(\~Limit Broke~); } var l = self.limitbreak.script.split(~Gadget.changegadget(self | \~~ + self.limitbreak.name + ~\~|~); if(l.length > 1) { self.limitbreak.script = l.join(~self.changelimitbreak(\~~); } var h = self.limitbreak.script.split(~var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110;~); if(h.length > 1) { self.limitbreak.script = h.join(~var proximy = self.y + 335; var proximx = self.x + 960;~); }
ncr Cyber Limit Enforcer target,Further internal limit break correction,,var j = target.limitbreak.script.split(~Gadget.changegadget(self| \~~ + target.limitbreak.name + ~\~| \~Broken Gadget~); if(j.length > 1) { target.limitbreak.script = j.join(~self.changelimitbreak(\~Limit Broke~); } var l = target.limitbreak.script.split(~Gadget.changegadget(self | \~~ + target.limitbreak.name + ~\~|~); if(l.length > 1) { target.limitbreak.script = l.join(~self.changelimitbreak(\~~); } var h = target.limitbreak.script.split(~var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110;~); if(h.length > 1) { target.limitbreak.script = h.join(~var proximy = self.y + 335; var proximx = self.x + 960;~); }
Trinity,+3 to a random dice,,var extradice = []; var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { sfx(~diceroll~); var randdice = rand(availdice); if((randdice.basevalue + 3) > 6) { randdice.animatereroll(6| self.screenposition()); extradice.push(randdice.basevalue - 3); } else { randdice.animatereroll(randdice.basevalue + 3| self.screenposition()); } givedice(extradice); }
Rubber Bullet,Do [sword]2[;] 10% to do [sword]12,,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 20; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); attack(12); sfxdamage(target|12); } else{ attack(2); sfxdamage(target|2); }
Rollout,Reroll a random amount,,var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } var numlist = []; if(dicelist.length > 0) { sfx(~diceroll~); dicelist = shuffle(dicelist); numlist = [1]; for(i in 0...dicelist.length) { numlist.push(numlist[numlist.length - 1] + 1); } r = rand(numlist); for(i in 0...r) { dicelist[i].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()); } }
Guitar Solo,[weaken]1 per 2 items used (<var:invgadgets_eqsused_display>),,if(self.getvar(~invgadgets_eqsused_display~) > 0) { inflict(WEAKEN|self.getvar(~invgadgets_eqsused_display~)); sfx(~_weaken~); } else { self.textparticle(~No effect!~); } //all the gadgetroll string-modification weirdness wasn't even necessary oops
