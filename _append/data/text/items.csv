Name,Description,Requirements,Script
Plexiglass,-1 dice for you and enemy,,if(self.dice + self.extradice == 1 # target.dice + target.extradice == 1) { self.textparticle(~Can't go lower!~); } else { self.extradice--; target.extradice--; sfx(~magic_gaindice~); }
Obfuscate,Inflict [blind]2 blind,,inflict(BLIND|2); sfx(~_blind~);
Science,Blind a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(BLIND| r); sfx(~_blind~); // you could probably do this without r by just putting the rand in place of it; but this is how the official items do it so what-ever
Neutron Star,Odd turns: [sword]3[;] even turns: [sword]6,,if(turn % 2 == 0) { attack(8); sfxdamage(target|8); } else { attack(4); sfxdamage(target|4); }
Berlin Nerf OMG,Set a dice to your highest dice,,var dicelist = []; var max = 0; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice);  if (mydice.basevalue > max) { max = mydice.basevalue; } } } if(dicelist.length > 0 && max > 0) { shuffle(dicelist); dicelist[0].animatereroll(max| self.screenposition()); }
Healthy Eating,Gain 2 max hp (once),,self.maxhp +=2; attackself(-2); sfx(~_heal~); Gadget.changegadget(self| ~Healthy Eating~| ~Broken Gadget~); //kale salad used to be the only way of raising max hp; builds exploiting kale salad with hookshot and a breakable enemy (like paper knight) were called 'healthy eating' builds at least once
Electrify,Shock a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(SHOCK| r); sfx(~_shock~);
Underwhelm,Do [sword]<var:underwhelm> dmg[;] dmg -1,,if(!self.getvar(~underwhelm~) > 0) {self.setvar(~underwhelm~|5);} attack(self.getvar(~underwhelm~)); sfxdamage(target|self.getvar(~underwhelm~)); if(self.getvar(~underwhelm~) > 1) {self.setvar(~underwhelm~|self.getvar(~underwhelm~)-1);} // base value of underwhelm; 5; was _merged into inventor gadgets. also yes; i use semicolons instead of commas; do; not; mock me;;;;;;
Dice Bash,Do [sword]<d6> (one of your dice),,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); }} if(dicelist.length > 0) { shuffle(dicelist); attack(dicelist[0]); sfxdamage(target|dicelist[0]); }
Phillips Head,[sword]3 dmg[;] [sword]6 if reactivated,,if (self.getvar(~phillip~) != true) { attack(3); self.setvar(~phillip~|true); } else { attack(6); } // _merge inventor gadgets shenanigans
Drunken Boxing,Do [sword]1-10 damage,,var r = rand([1|2|2|3|3|3|4|4|4|4|5|5|5|5|5|6|6|6|6|6|7|7|7|7|8|8|8|9|9|10]); attack(r); sfxdamage(target|r);
Rod,Cut enemy health by 1/6,,var p = (target.hp / 6); pierceattack(p); sfxdamage(target|p);
Perfectionism,Make dice parity match,,var availabledice = []; var evens = 0; var odds = 0; var oddparity = false; for (mydice in self.dicepool){ if (mydice.available()){ availabledice.push(mydice); if (mydice.basevalue % 2 == 0) { evens++; } else { odds++; } } } if(availabledice.length > 0) { if(evens > odds) { oddparity = true; } else if(evens == odds) { oddparity = rand([false|true]); } if(oddparity == false) { for(mydice in availabledice){ if mydice.basevalue % 2 == 0 { mydice.animatereroll(mydice.basevalue - 1|self.screenposition()); } } } else { for(mydice in availabledice) { if mydice.basevalue % 2 == 1 { mydice.animatereroll(mydice.basevalue + 1|self.screenposition()); } } } else { self.textparticle(~No effect!~); }
Purify,Clear statuses for both,,var statuslist = [POISON|FIRE|SHOCK|ICE|WEAKEN|CURSE|BLIND|FURY|LOCK|SHIELD|REDUCE|DODGE|THORNS]; for(st in statuslist) { if(getstatus(st) > 0) { removestatus(st|ALL); } if(getstatusself(st) > 0) { removestatusself(st|ALL); } } sfx(~_cure~);
Scabbard (1/2),Get Sacrificial Blade (once),,giveequipment(~Sacrificial Blade@2~|true|false); Gadget.changegadget(self|~Scabbard (1/2)~| ~Broken Gadget~);
Scabbard+ (1/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@2+~|true|false); Gadget.changegadget(self|~Scabbard+ (1/4)~| ~Broken Gadget~);
Scabbard (2/2),Get Sacrificial Blade (once),,giveequipment(~Sacrificial Blade@1~|true|false); Gadget.changegadget(self|~Scabbard (2/2)~| ~Broken Gadget~);
Scabbard+ (2/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@1+~|true|false); Gadget.changegadget(self|~Scabbard+ (2/4)~| ~Broken Gadget~);
Scabbard+ (3/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@0+~|true|false); Gadget.changegadget(self|~Scabbard+ (3/4)~| ~Broken Gadget~);
Scabbard+ (4/4),Get Sacrificial Blade+ (once),,giveequipment(~Sacrificial Blade@X+~|true|false); Gadget.changegadget(self|~Scabbard+ (4/4)~| ~Broken Gadget~);
Deep Breath,Trash all dice[;] gain [heal]3 each,,for (mydice in self.dicepool){ if (mydice.available()){ mydice.removedice(self.screenposition()); attackself(-3); }} // actually an official item that was scrapped - see https://github.com/TerryCavanagh/diceydungeonsbeta/issues/264
Delude,Inflict [vanish]1 vanish,,//inflict(~ncr_vanish~); sfx(~_vanish~);
Strobe Light,Vanish a random amount,,//var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(~ncr_vanish~| r); sfx(~_vanish~);
Hadoken,Do [vanish]3 vanish damage,,//attack(3|VANISH); sfx(~_vanish~);
Briar Bush,Gain [thorns]2 thorns,,inflictself(THORNS|2); sfx(~_thorns~);
Aura Channeling,Vanish duplicate dice,,//inflict(VANISH);
THE [200%]GASDGFET,[200%]THE [300%]SBETST [200%]GDAGET IN DICE DUNGENS,,attack(2); sfxdamage(target|999);
Light Switch,Copy a dice for next turn,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); }} if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0]); inflictself(~ncr_lightswitch~+dicelist[0]); sfx(~magic~); }
Install Evony,In [jinx]1[;] equipment uses raise CPU,,jinx(~Install Evony~|~each equipment use will raise CPU by 1~|~Each equipment use will raise CPU by 1~|~inflict(\~cpuvirus\~| 1); sfx(\~magic\~);~|self|self|1|0); sfx(~_thinghappens~);
impulse 101,In [jinx]1[;] increase Jackpot range,,jinx(~impulse 101~|~increase Jackpot range~|~Increase Jackpot range~|~target.roll_range += 1; sfx(\~useitem\~);~|self|self|1|0); sfx(~_thinghappens~);
Less Fluff Old,Scrap a card now (reusable),,var cardlist = []; for(eq in self.equipment){ if(eq.ready && eq.name != ~Inventor Gadgets~) { cardlist.push(eq); } } if(cardlist.length > 0) { shuffle(cardlist); Gadget.givegadget(self|cardlist[0].gadget|true); removeequipment(cardlist[0].name); sfx(~_cure~); cardlist.remove(cardlist[0]); } if (cardlist.length > 0) { Gadget.reactivate(self|~Less Fluff~); } //  self.textparticle(~No cards left!~);
Less Fluff,Scrap first equipment now,,var cardlist = []; for(eq in self.equipment){ if(eq.ready && eq.name != self.getskillcard().name /*&& eq.gadget != ~Broken Gadget~*/) { cardlist.push(eq); } } if(cardlist.length > 0) { Gadget.givegadget(self|cardlist[0].gadget|true); removeequipment(cardlist[0].name); sfx(~_cure~); cardlist.remove(cardlist[0]); self.getskillcard().animate(~flashandshake~); }
Proximity Mine,Reroll dice closest to this,,trace(self.dicepool[0].dicesize); var proximy = self.getskillcard().y + (self.getskillcard().height / 2) - 132; var proximx = self.getskillcard().x + (self.getskillcard().width / 2) - 110; self.dicepool[0].x = proximx; self.dicepool[0].y = proximy; // var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } if(dicelist.length != 0) { var proxlist = []; for(mydice in dicelist) { proxlist.push(((mydice.x - proximx) * (mydice.x - proximx)) + ((mydice.y - proximy) * (mydice.y - proximy))); if(proxlist[proxlist.length - 1] < 0) { proxlist[proxlist.length - 1] = proxlist[proxlist.length - 1] * -1; } } var min = [0|999999999999999999999]; for(prox in proxlist) { trace(prox); trace(min[1]); trace(~---~); if(prox < min[1]) { min[1] = prox; min[0] = proxlist.indexOf(prox); } } dicelist[min[0]].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()); }
Turbo Boost,12 to a random count,,var poss = []; for(eq in self.equipment){if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq) } }  if(poss.length > 0){ var r = rand(poss); givedice(6); givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); r.assigndice(self.dicepool[self.dicepool.length - 2]); } //basically another ropedart copypaste. should that 2 be a 1 i dono
Laser Beam,Do [sword]5 damage,,attack(5); sfxdamage(target|5);
Invert Polarity,Bump odds[;] nudge evens,,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue % 2 == 0){ mydice.animatereroll((mydice.basevalue - 1)| self.screenposition()| c * 0.05); c++; } { if (mydice.available() && mydice.basevalue % 2 == 1){ mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| g * 0.05); g++; } }
Razor Blade,Split all dice,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { for(mydice in dicelist) { mydice.removedice(self.screenposition()); givedice(split(mydice.basevalue)); } }
Emulator,Copy a card's gadget,,//wip
Gadget Roll,Reroll a dice (3 uses),,var availdice = []; for (mydice in self.dicepool){ if (mydice.available()){ availdice.push(mydice); } } if(availdice.length > 0) { shuffle(availdice); availdice[0].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition());  } if(self.getvar(~grolluses~) > 0) { self.setvar(~grolluses~|self.getvar(~grolluses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Gadget Roll~) { var a = ~~ + self.getvar(~grolluses~); trace(a); var b = ~~ + (self.getvar(~grolluses~) + 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } } if(self.getvar(~grolluses~) > 0) { Gadget.reactivate(self|~Gadget Roll~); }
Mirror Smash,-3 [heart][;] get dice (3 uses),,pierceattackself(3); givedice(); sfx(~magic_gaindice~); if(self.getvar(~smashuses~) > 0) { self.setvar(~smashuses~|self.getvar(~smashuses~) - 1); } for(myskill in self.getskillcard().skills) { if(myskill.name == ~Mirror Smash~) { var a = ~~ + self.getvar(~smashuses~); trace(a); var b = ~~ + (self.getvar(~smashuses~) + 1); trace(b); var m = myskill.description.split(b); trace(m); myskill.description = m.join(a); } } if(self.getvar(~smashuses~) > 0) { Gadget.reactivate(self|~Mirror Smash~); }
