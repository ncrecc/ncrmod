if(!simulation && e.getvar(~furycheck~) != 1) {
	for(eq in self.equipment) {
		eq.setvar(~alreadyheretemp~|1);
	}
}
givedice([d|d]);
if(simulation) self.textparticle(~No effect!~);
if(!simulation && e.getvar(~furycheck~) != 1) {
	sfx(~_thinghappens~);
	var slotblacklist = [~DOUBLES~|~NORMAL~|~COUNTDOWN~];
	for(num in [1|2|3|4|5|6]) if(d == num) slotblacklist.push(~REQUIRE~ + num);
	for(num in [1|2|3|4|5]) if(d <= num) slotblacklist.push(~MAX~ + num);
	for(num in [2|3|4|5]) if(d >= num) slotblacklist.push(~MIN~ + num);
	if(d % 2 == 0) slotblacklist.push(~EVEN~); else slotblacklist.push(~ODD~);
	/*can't think of how to do this nicely*/
	d == 2 ? slotblacklist = slotblacklist.concat([~RANGE25~|~RANGE24~|~RANGE23~]) :
	d == 3 ? slotblacklist = slotblacklist.concat([~RANGE35~|~RANGE34~|~RANGE23~|~RANGE25~|~RANGE23~]) :
	d == 4 ? slotblacklist = slotblacklist.concat([~RANGE35~|~RANGE34~|~RANGE45~|~RANGE25~|~RANGE23~]) :
	d == 5 ? slotblacklist = slotblacklist.concat([~RANGE25~|~RANGE35~|~RANGE45~]) : donothing();
	/*why donothing()? haxe requires ternary conditionals to end with a : and doesn't accept ; as a blank statement; and if i just returned false or something as my 'statement' that might cause very obscure problems with some obscure function taking that statement as a return value so i'd rather play it safe and assume calling donothing() absolutely truly never does anything*/
	var descriptionblacklist = loadtext(~ncrmod/itemspawnerdescblacklist~);
	var scriptblacklist = [~self.equipment~|~new elements.Equipment~];
	var checkblacklist = function(text|list) {
		for(phrase in list) {
			if(text.indexOf(phrase) != -1) {
				return(false);
			}
		}
		return(true);
	};
	var notfiteq = ~~;
	var exceptions = [~skillcard~|~excludefromrandomlists~|~alternateversion~|~robotonly~|~witchonly~|~inventoronly~|~onceperbattle~];
	if(self.usecpuinsteadofdice) exceptions.remove(~robotonly~);
	if(self.getskillcard() != null && self.getskillcard().skillcard == ~witch~) exceptions.remove(~witchonly~);
	if(self.getskillcard() != null && self.getskillcard().skillcard == ~inventor~) exceptions.remove(~inventoronly~);
	var inclusions = [];
	var geteqs = getequipmentlist(null|inclusions|exceptions);
	geteqs = shuffle(geteqs);
	var placeholder = new elements.Equipment(~Plague~);
	var count = 0; while(notfiteq == ~~) {
		placeholder.create(geteqs[count]);
		var ds = placeholder.fulldescription;
		var sc = placeholder.script;
		var scbx = placeholder.scriptbeforeexecute;
		if(
			((checkblacklist(placeholder.getslots()|slotblacklist) && !(placeholder.countdown > 0) && !(placeholder.hastag(~powercard~))) # (placeholder.needstotal <= d && placeholder.needstotal > 0)) &&
			checkblacklist(ds|descriptionblacklist) &&
			checkblacklist(sc|scriptblacklist) &&   checkblacklist(scbx|scriptblacklist)
		) {
			if(e.size == 1) {
				if(placeholder.slots.length < 4) {
					notfiteq = placeholder.name;
				}
			}
			else notfiteq = placeholder.name;
		}
		/*else { geteqs.remove(placeholder.name); }*/
		count++;
		if(count >= geteqs.length) {
			notfiteq = ~Plague~;
			break;
		}
	}
	if(e.size == 2) {
		giveequipment(notfiteq|true);
	}
	else { /*aaaaaaa*/
		giveequipment(~Equipment That Does Nothing~|true);
		for(eq in self.equipment) {
			if(eq.getvar(~alreadyheretemp~) != 1) {
				/*just changing the size and height of a card after giveequipment is called won't be enough; since cards would've shuffled around to make room for it as though it were size 2 by then. so instead i take a size 1 equipment and manually override its properties with that of a size 2 equipment*/
				eq.script = placeholder.script;
				eq.scriptbeforestartturn = placeholder.scriptbeforestartturn;
				eq.scriptonstartturn = placeholder.scriptonstartturn;
				eq.scriptendturn = placeholder.scriptendturn;
				eq.scriptbeforecombat = placeholder.scriptbeforecombat;
				eq.scriptaftercombat = placeholder.scriptaftercombat;
				eq.scriptonanyequipmentuse = placeholder.scriptonanyequipmentuse;
				eq.scriptonanycountdownreduce = placeholder.scriptonanycountdownreduce;
				eq.scriptbeforeexecute = placeholder.scriptbeforeexecute;
				eq.scriptonsnap = placeholder.scriptonsnap;
				eq.scriptiffury = placeholder.scriptiffury;
				eq.fulldescription = placeholder.fulldescription;
				eq.displayname = placeholder.displayname;
				eq.name = placeholder.name;
				eq.rawname = placeholder.rawname;
				eq.namemodifier = placeholder.namemodifier;
				eq.countdown = placeholder.countdown;
				eq.reducecountdownby = placeholder.reducecountdownby;
				eq.remainingcountdown = placeholder.remainingcountdown;
				eq.reducecountdowndelay = placeholder.reducecountdowndelay;
				eq.overwritefinalline = placeholder.overwritefinalline;
				eq.tags = []; for(i in 0...placeholder.tags.length) eq.tags.push(placeholder.tags[i]);
				eq.castdirection = placeholder.castdirection;
				eq.upgradetype = placeholder.upgradetype;
				eq.weakentype = placeholder.weakentype;
				eq.equipmentcol = placeholder.equipmentcol;
				eq.reuseable = placeholder.reuseable;
				eq.usesleft = placeholder.usesleft;
				eq.onceperbattle = placeholder.onceperbattle;
				eq.sfxoverride = placeholder.sfxoverride;
				eq.playersound = placeholder.playersound;
				eq.enemysound = placeholder.enemysound;
				eq.allowupdatereuseabledescription = placeholder.allowupdatereuseabledescription;
				eq.needstotal = placeholder.needstotal;
				eq.gadget = placeholder.gadget;
				eq.upgraded = placeholder.upgraded;
				eq.weakened = placeholder.weakened;
				eq.name_beforesubstitution = placeholder.name_beforesubstitution;
				eq.rawname_beforesubstitution = placeholder.rawname_beforesubstitution;
				eq.conditionalslots = placeholder.conditionalslots;
				eq.needsdoubles = placeholder.needsdoubles;
				eq.ignoredicevalue = placeholder.ignoredicevalue;
				eq.charge = placeholder.charge;
				eq.maxcountdown = placeholder.maxcountdown;
				eq.originallyupgraded = placeholder.originallyupgraded;
				eq.changeslots(placeholder.getslots());
				eq.updatereuseabledescription();
				eq.arrangeslots();
			}
		}
	}
	for(eq in self.equipment) {
		if(eq.getvar(~alreadyheretemp~) != 1) {
			self.setvar(~doonthis~|eq);
			break;
		}
	}
	var estandardize = ~var e = self.getvar(\~doonthis\~); ~;
	var doscripts = new elements.Skill(~Against all odds_old~);
	doscripts.script = estandardize + placeholder.scriptbeforecombat;
	doscripts.execute(self|target);
	doscripts.script = estandardize + placeholder.scriptbeforestartturn;
	doscripts.execute(self|target);
	doscripts.script = estandardize + placeholder.scriptonstartturn;
	doscripts.script = doscripts.script.split(~ e.doequipmentaction(~).join(~self.setvar(\~doonthis\~|e); var doscript = new elements.Skill(\~Against all odds_old\~); doscript.script = \~var e = self.getvar(\\\~doonthis\\\~); \~ + e.scriptbeforeexecute; doscript.execute(self|target); doscript.script = \~var e = self.getvar(\\\~doonthis\\\~); \~ + e.script; doscript.execute(self|target); self.resetvar(\~doonthis\~); if(false) e.doequipmentaction(~);
	for(num in [1|2|3|4|5|6]) doscripts.script = doscripts.script.split(~ var mynewdice = new elements.Dice(); mynewdice.basevalue = ~ + num + ~; self.dicepool.push(mynewdice); mynewdice.x = e.x + 280; mynewdice.y = e.y + 192;~).join(~givedice(~ + num + ~);~);
	doscripts.execute(self|target);
	self.resetvar(~doonthis~);
	placeholder.name = ~deletemetemp~;
	self.equipment.push(placeholder);
	removeequipment(~deletemetemp~);
	for(eq in self.equipment) {
		eq.resetvar(~alreadyheretemp~);
	}
}
e.setvar(~furycheck~|1);