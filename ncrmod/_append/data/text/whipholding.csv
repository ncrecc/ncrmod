Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Category,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Parallel Universe,Special?,Error Immune,Show Gold,Appears For Parts,Hide Reuseable,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury
Whisp@F,Do [fire]<d6> damage[;]|inflict [fire]burn on 6[;]|inflict [weaken]weaken on 5,2,attack(d|FIRE); if(d == 6){ inflict(FIRE); sfx(~_fire~|~~|0.2); self.setvar(~whisp~|false); } if(d == 5){ inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~whisp~|true); } //no; you don't get a pu version that applies weaken before instead of after; because 1. i don't care and 2. it would just make things more nightmarish; not to mention i'd have to introduce hamment? to maintain consistency even though that would look pretty ugly and useless,Hellfire,NORMAL,,WEAPON,RED,change_power,change_function,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == true) { giveequipment(~Whisp@W~| true| false| e); },if (self.getvar(~whisp~) == true) { giveequipment(~Whisp@W~| true| false| e); },,,,,,,
Whisp@F_upgraded,Do [fire]<d6> damage[;]|inflict [fire]burn on even[;]|inflict [weaken]weaken on odd,2,attack(d|FIRE); if(d % 2 == 0){ inflict(FIRE); sfx(~_fire~|~~|0.2); self.setvar(~whisp~|false); } else { inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~whisp~|true); },Hellfire,NORMAL,,WEAPON,RED,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == true) { giveequipment(~Whisp@W+~| true| false| e); },if (self.getvar(~whisp~) == true) { giveequipment(~Whisp@W+~| true| false| e); },,,,,,,
Whisp@F_downgraded,Do [fire]<d6> damage,2,attack(d|FIRE);,Hellfire,NORMAL,,WEAPON,RED,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == true) { giveequipment(~Whisp@W~| true| false| e); },,,,,,,,
Whisp@W,Do [weaken]<d6> damage[;]|inflict [weaken]weaken on 6[;]|inflict [fire]burn on 5,2,attack(d|WEAKEN); if(d == 5){ inflict(FIRE); sfx(~_fire~|~~|0.2); self.setvar(~whisp~|false); } if(d == 6){ inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~whisp~|true); },Scream,NORMAL,,WEAPON,ORANGE,change_power,change_function,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == false) { giveequipment(~Whisp@F~| true| false| e); },if (self.getvar(~whisp~) == false) { giveequipment(~Whisp@F~| true| false| e); },,,,,,,
Whisp@W_upgraded,Do [weaken]<d6> damage[;]|inflict [weaken]weaken on even[;]|inflict [fire]burn on odd,2,attack(d|WEAKEN); if(d % 2 == 1){ inflict(FIRE); sfx(~_fire~|~~|0.2); self.setvar(~whisp~|false); } else { inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~whisp~|true); },Scream,NORMAL,,WEAPON,ORANGE,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == false) { giveequipment(~Whisp@F+~| true| false| e); },if (self.getvar(~whisp~) == false) { giveequipment(~Whisp@F+~| true| false| e); },,,,,,,
Whisp@W_downgraded,Do [weaken]<d6> damage,2,attack(d|WEAKEN);,Scream,NORMAL,,WEAPON,ORANGE,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~whisp~) == false) { giveequipment(~Whisp@F~| true| false| e); },,,,,,,,
Hamment@I,Do [ice]<d6> damage[;]|inflict [ice]freeze on 6[;]|inflict [shock]shock on 5,2,attack(d|ICE); if(d == 6){ inflict(ICE); sfx(~_ice~|~~|0.2); self.setvar(~hamment~|false); } if(d == 5){ inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~hamment~|true); } //hamment is actually a million times better of a pun than whisp; omg,Arctic Storm,NORMAL,,WEAPON,BRIGHTCYAN,change_power,change_function,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == true) { giveequipment(~Hamment@S~| true| false| e); },if (self.getvar(~hamment~) == true) { giveequipment(~Hamment@S~| true| false| e); },,,,,,,
Hamment@I_upgraded,Do [ice]<d6> damage[;]|inflict [ice]freeze on even[;]|inflict [shock]shock on odd,2,attack(d|ICE); if(d % 2 == 0){ inflict(ICE); sfx(~_ice~|~~|0.2); self.setvar(~hamment~|false); } else { inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~hamment~|true); },Arctic Storm,NORMAL,,WEAPON,BRIGHTCYAN,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == true) { giveequipment(~Hamment@S+~| true| false| e); },if (self.getvar(~hamment~) == true) { giveequipment(~Hamment@S+~| true| false| e); },,,,,,,
Hamment@I_downgraded,Do [ice]<d6> damage,2,attack(d|ICE);,Arctic Storm,NORMAL,,WEAPON,BRIGHTCYAN,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == true) { giveequipment(~Hamment@S~| true| false| e); },,,,,,,,
Hamment@S,Do [shock]<d6> damage[;]|inflict [shock]shock on 6[;]|inflict [ice]freeze on 5,2,attack(d|SHOCK); if(d == 5){ inflict(ICE); sfx(~_ice~|~~|0.2); self.setvar(~hamment~|false); } if(d == 6){ inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~hamment~|true); },Electrify,NORMAL,,WEAPON,YELLOW,change_power,change_function,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == false) { giveequipment(~Hamment@I~| true| false| e); },if (self.getvar(~hamment~) == false) { giveequipment(~Hamment@I~| true| false| e); },,,,,,,
Hamment@S_upgraded,Do [shock]<d6> damage[;]|inflict [shock]shock on even[;]|inflict [ice]freeze on odd,2,attack(d|SHOCK); if(d % 2 == 1){ inflict(ICE); sfx(~_ice~|~~|0.2); self.setvar(~hamment~|false); } else { inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~hamment~|true); },Electrify,NORMAL,,WEAPON,YELLOW,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == false) { giveequipment(~Hamment@I+~| true| false| e); },if (self.getvar(~hamment~) == false) { giveequipment(~Hamment@I+~| true| false| e); },,,,,,,
Hamment@S_downgraded,Do [shock]<d6> damage,2,attack(d|SHOCK);,Electrify,NORMAL,,WEAPON,YELLOW,,,,_damage,0,NO,NO,NO,NO,NO,NO,NO,NO,,,if (self.getvar(~hamment~) == false) { giveequipment(~Hamment@I~| true| false| e); },,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hail Bat,Do [sword]<d6> damage[;]|but [ice]Freeze yourself,2,attack(d); inflictself(~ice~); sfxdamage(d); sfx(~_ice~); var dicelist = []; var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); for(i in 0...1) { dicelist[i].animate(~ice~|t); t += 0.1; },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,reducesize,change_function,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Hail Bat_downgraded,Do [sword]<d6> damage[;]|but [ice]Freeze yourself twice,2,attack(d); inflictself(~ice~|2); sfxdamage(d); sfx(~_ice~); var dicelist = []; var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); for(i in 0...2) { dicelist[i].animate(~ice~|t); t += 0.1; },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Hail Bat_weakened,Do [sword]<d6> damage[;]|but [ice]Freeze yourself twice,1,attack(d); inflictself(~ice~|2); sfxdamage(d); sfx(~_ice~); var dicelist = []; var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); for(i in 0...2) { dicelist[i].animate(~ice~|t); t += 0.1; },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess,Do [sword]<d6> damage[;]|but [fire]Burn yourself,2,attack(d); inflictself(~fire~); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...1) { dicelist[i].animate(~fire~|t); t += 0.2; } // not technically burn - burns a random dice instead of your first dice. however normally burn burning your first dice is random because it happens before you know what your first dice is,Blowtorch,NORMAL|FREE3,,WEAPON,RED,reducesize,change_function,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess_downgraded,Do [sword]<d6> damage[;]|but [fire]Burn yourself twice,2,attack(d); inflictself(~fire~|2); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...2) { dicelist[i].animate(~fire~|t); t += 0.2; },Blowtorch,NORMAL|FREE3,,WEAPON,RED,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess_weakened,Do [sword]<d6> damage[;]|but [fire]Burn yourself twice,1,attack(d); inflictself(~fire~|2); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...2) { dicelist[i].animate(~fire~|t); t += 0.2; },Blowtorch,NORMAL|FREE3,,WEAPON,RED,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Hail Bat?,Do [sword]<d6> damage[;]|but [ice]Freeze yourself,2,attack(d); inflictself(~alternate_ice~); sfxdamage(d); sfx(~_ice~); for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(~alternate_ice~); } },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,reducesize,change_function,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Hail Bat?_downgraded,Do [sword]<d6> damage[;]|but [ice]Freeze yourself twice,2,attack(d); inflictself(~alternate_ice~|2); sfxdamage(d); sfx(~_ice~); sfx(~_ice~|0.2); for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(~alternate_ice~);  mydice.animate(~alternate_ice~|0.2); } },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Hail Bat?_weakened,Do [sword]<d6> damage[;]|but [ice]Freeze yourself twice,1,attack(d); inflictself(~alternate_ice~|2); sfxdamage(d); sfx(~_ice~); sfx(~_ice~|0.2); for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(~alternate_ice~);  mydice.animate(~alternate_ice~|0.2); } },Flash Freeze,NORMAL|FREE3,,WEAPON,BRIGHTCYAN,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess?,Do [sword]<d6> damage[;]|but [fire]Burn yourself,2,attack(d); inflictself(~alternate_fire~); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...1) { dicelist[i].animate(~alternate_fire~|t); t += 0.2; },Blowtorch,NORMAL|FREE3,,WEAPON,RED,reducesize,change_function,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess?_downgraded,Do [sword]<d6> damage[;]|but [fire]Burn yourself twice,2,attack(d); inflictself(~alternate_fire~|2); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...2) { dicelist[i].animate(~alternate_fire~|t); t += 0.2; },Blowtorch,NORMAL|FREE3,,WEAPON,RED,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
Flaming Sword I Guess?_weakened,Do [sword]<d6> damage[;]|but [fire]Burn yourself twice,1,attack(d); inflictself(~alternate_fire~|2); sfxdamage(d); sfx(~_fire~); var t = 0; for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn){ dicelist.push(mydice); } } shuffle(dicelist); for (i in 0...2) { dicelist[i].animate(~alternate_fire~|t); t += 0.2; },Blowtorch,NORMAL|FREE3,,WEAPON,RED,,,,none,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,,
